# Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

# typed: true
# frozen_string_literal: true


module OpenApiSDK
  module Models
    module Components
    

      class CreditNoteCreate
        extend T::Sig
        include Crystalline::MetadataFields

        # Unique identifier for the credit note in the external system.
        field :external_id, ::String, { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('external_id'), required: true } }
        # Date when the credit note was issued or created.
        field :date, ::DateTime, { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('date'), required: true, 'decoder': Utils.datetime_from_iso_format(false) } }
        # Current state of the credit note in its lifecycle.
        field :status, Models::Components::Status, { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('status'), required: true, 'decoder': Utils.enum_from_string(Models::Components::Status, false) } }

        field :currency, Models::Components::CurrencyEnum, { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('currency'), required: true, 'decoder': Utils.enum_from_string(Models::Components::CurrencyEnum, false) } }
        # Detailed list of individual items included in this credit note.
        field :transaction_items, T::Array[Models::Components::CreditNoteItemCreateUpdate], { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('transaction_items'), required: true } }
        # Total monetary value of the credit note, including all items and taxes.
        field :total_amount, T.nilable(T.any(::Float, ::String)), { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('total_amount') } }
        # Brief explanation or reason for issuing the credit note.
        field :description, T.nilable(::String), { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('description') } }
        # Indicates whether this credit note is associated with a marketplace transaction.
        field :marketplace, T.nilable(T::Boolean), { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('marketplace') } }
        # Pre-calculated total tax amount for the entire credit note, if provided by the external system.
        field :tax_amount_imported, T.nilable(T.any(::Float, ::String)), { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('tax_amount_imported') } }
        # Pre-calculated overall tax rate for the credit note, if provided by the external system.
        field :tax_rate_imported, T.nilable(T.any(::Float, ::String)), { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('tax_rate_imported') } }
        # Total portion of the credit note amount subject to taxation.
        field :taxable_amount, T.nilable(T.any(::Float, ::String)), { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('taxable_amount') } }
        # A list of TransactionAddressBuilder objects or None if no addresses are provided. This field represents the addresses associated with the transaction.
        field :addresses, T.nilable(T::Array[Models::Components::TransactionAddressBuilder]), { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('addresses') } }

        sig { params(external_id: ::String, date: ::DateTime, status: Models::Components::Status, currency: Models::Components::CurrencyEnum, transaction_items: T::Array[Models::Components::CreditNoteItemCreateUpdate], total_amount: T.nilable(T.any(::Float, ::String)), description: T.nilable(::String), marketplace: T.nilable(T::Boolean), tax_amount_imported: T.nilable(T.any(::Float, ::String)), tax_rate_imported: T.nilable(T.any(::Float, ::String)), taxable_amount: T.nilable(T.any(::Float, ::String)), addresses: T.nilable(T::Array[Models::Components::TransactionAddressBuilder])).void }
        def initialize(external_id:, date:, status:, currency:, transaction_items:, total_amount: nil, description: nil, marketplace: nil, tax_amount_imported: nil, tax_rate_imported: nil, taxable_amount: nil, addresses: nil)
          @external_id = external_id
          @date = date
          @status = status
          @currency = currency
          @transaction_items = transaction_items
          @total_amount = total_amount
          @description = description
          @marketplace = marketplace
          @tax_amount_imported = tax_amount_imported
          @tax_rate_imported = tax_rate_imported
          @taxable_amount = taxable_amount
          @addresses = addresses
        end

        sig { params(other: T.untyped).returns(T::Boolean) }
        def ==(other)
          return false unless other.is_a? self.class
          T.cast(other, CreditNoteCreate)
          return false unless @external_id == other.external_id
          return false unless @date == other.date
          return false unless @status == other.status
          return false unless @currency == other.currency
          return false unless @transaction_items == other.transaction_items
          return false unless @total_amount == other.total_amount
          return false unless @description == other.description
          return false unless @marketplace == other.marketplace
          return false unless @tax_amount_imported == other.tax_amount_imported
          return false unless @tax_rate_imported == other.tax_rate_imported
          return false unless @taxable_amount == other.taxable_amount
          return false unless @addresses == other.addresses
          true
        end
      end
    end
  end
end

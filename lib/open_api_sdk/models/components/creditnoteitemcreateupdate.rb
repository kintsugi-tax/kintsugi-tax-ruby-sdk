# Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

# typed: true
# frozen_string_literal: true


module OpenApiSDK
  module Models
    module Components
    

      class CreditNoteItemCreateUpdate
        extend T::Sig
        include Crystalline::MetadataFields

        # Unique identifier for the credit note item in the external system.
        field :external_id, ::String, { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('external_id'), required: true } }
        # Date when the credit note item was issued or created.
        field :date, ::DateTime, { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('date'), required: true, 'decoder': Utils.datetime_from_iso_format(false) } }
        # Unique identifier for the associated product in the external system.
        field :external_product_id, ::String, { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('external_product_id'), required: true } }
        # Number of units or amount of the product being credited.
        field :quantity, T.nilable(T.any(::Float, ::String)), { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('quantity') } }
        # Total monetary value of the credit note item before taxes.
        field :amount, T.nilable(T.any(::Float, ::String)), { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('amount') } }
        # Detailed breakdown of individual tax components applied to this item.
        field :tax_items, T.nilable(T::Array[Models::Components::TaxItemBuilder]), { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('tax_items') } }
        # Brief explanation or details about the credit note item.
        field :description, T.nilable(::String), { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('description') } }
        # Pre-calculated tax amount for the item, if provided by the external system.
        field :tax_amount_imported, T.nilable(T.any(::Float, ::String)), { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('tax_amount_imported') } }
        # Pre-calculated tax rate for the item, if provided by the external system.
        field :tax_rate_imported, T.nilable(T.any(::Float, ::String)), { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('tax_rate_imported') } }
        # Portion of the item amount subject to taxation.
        field :taxable_amount, T.nilable(T.any(::Float, ::String)), { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('taxable_amount') } }
        # Specific tax exemption status applied to this item, if any.
        field :tax_exemption, T.nilable(Models::Components::TaxExemptionEnum), { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('tax_exemption'), 'decoder': Utils.enum_from_string(Models::Components::TaxExemptionEnum, true) } }

        sig { params(external_id: ::String, date: ::DateTime, external_product_id: ::String, quantity: T.nilable(T.any(::Float, ::String)), amount: T.nilable(T.any(::Float, ::String)), tax_items: T.nilable(T::Array[Models::Components::TaxItemBuilder]), description: T.nilable(::String), tax_amount_imported: T.nilable(T.any(::Float, ::String)), tax_rate_imported: T.nilable(T.any(::Float, ::String)), taxable_amount: T.nilable(T.any(::Float, ::String)), tax_exemption: T.nilable(Models::Components::TaxExemptionEnum)).void }
        def initialize(external_id:, date:, external_product_id:, quantity: nil, amount: nil, tax_items: nil, description: nil, tax_amount_imported: nil, tax_rate_imported: nil, taxable_amount: nil, tax_exemption: nil)
          @external_id = external_id
          @date = date
          @external_product_id = external_product_id
          @quantity = quantity
          @amount = amount
          @tax_items = tax_items
          @description = description
          @tax_amount_imported = tax_amount_imported
          @tax_rate_imported = tax_rate_imported
          @taxable_amount = taxable_amount
          @tax_exemption = tax_exemption
        end

        sig { params(other: T.untyped).returns(T::Boolean) }
        def ==(other)
          return false unless other.is_a? self.class
          T.cast(other, CreditNoteItemCreateUpdate)
          return false unless @external_id == other.external_id
          return false unless @date == other.date
          return false unless @external_product_id == other.external_product_id
          return false unless @quantity == other.quantity
          return false unless @amount == other.amount
          return false unless @tax_items == other.tax_items
          return false unless @description == other.description
          return false unless @tax_amount_imported == other.tax_amount_imported
          return false unless @tax_rate_imported == other.tax_rate_imported
          return false unless @taxable_amount == other.taxable_amount
          return false unless @tax_exemption == other.tax_exemption
          true
        end
      end
    end
  end
end

# Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

# typed: true
# frozen_string_literal: true


module OpenApiSDK
  module Models
    module Components
    

      class Exemption
        extend T::Sig
        include Crystalline::MetadataFields


        field :exemption_type, Models::Components::ExemptionType, { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('exemption_type'), required: true, 'decoder': Utils.enum_from_string(Models::Components::ExemptionType, false) } }
        # Start date for the exemption validity period (YYYY-MM-DD format)
        field :start_date, ::Date, { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('start_date'), required: true, 'decoder': Utils.date_from_iso_format(false) } }
        # Unique identifier for the exemption
        field :id, T.nilable(::String), { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('id') } }
        # Timestamp when transaction was created in Kintsugi.
        field :created_at, T.nilable(::DateTime), { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('created_at'), 'decoder': Utils.datetime_from_iso_format(true) } }

        field :organization_id, T.nilable(::String), { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('organization_id') } }
        # Timestamp when transaction was last updated.
        field :updated_at, T.nilable(::DateTime), { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('updated_at'), 'decoder': Utils.datetime_from_iso_format(true) } }
        # The jurisdiction identifier for the exemption
        field :jurisdiction, T.nilable(::String), { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('jurisdiction') } }
        # Country code in ISO 3166-1 alpha-2 format (e.g., 'US')
        field :country_code, T.nilable(Models::Components::CountryCodeEnum), { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('country_code'), 'decoder': Utils.enum_from_string(Models::Components::CountryCodeEnum, true) } }
        # End date for the exemption validity period (YYYY-MM-DD format)
        field :end_date, T.nilable(::Date), { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('end_date'), 'decoder': Utils.date_from_iso_format(true) } }
        # Unique identifier for the customer associated with the exemption
        field :customer_id, T.nilable(::String), { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('customer_id') } }
        # Unique identifier for the transaction
        #         associated with the exemption, if applicable.
        field :transaction_id, T.nilable(::String), { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('transaction_id') } }
        # Indicates whether the exemption is for a reseller
        field :reseller, T.nilable(T::Boolean), { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('reseller') } }
        # Federal Employer Identification Number
        #         associated with the exemption.
        field :fein, T.nilable(::String), { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('FEIN') } }
        # Sales tax ID for the exemption
        field :sales_tax_id, T.nilable(::String), { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('sales_tax_id') } }
        # The status of the exemption.
        #         Defaults to ACTIVE if not provided.
        field :status, T.nilable(Models::Components::ExemptionStatus), { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('status'), 'decoder': Utils.enum_from_string(Models::Components::ExemptionStatus, true) } }

        sig { params(exemption_type: Models::Components::ExemptionType, start_date: ::Date, id: T.nilable(::String), created_at: T.nilable(::DateTime), organization_id: T.nilable(::String), updated_at: T.nilable(::DateTime), jurisdiction: T.nilable(::String), country_code: T.nilable(Models::Components::CountryCodeEnum), end_date: T.nilable(::Date), customer_id: T.nilable(::String), transaction_id: T.nilable(::String), reseller: T.nilable(T::Boolean), fein: T.nilable(::String), sales_tax_id: T.nilable(::String), status: T.nilable(Models::Components::ExemptionStatus)).void }
        def initialize(exemption_type:, start_date:, id: nil, created_at: nil, organization_id: nil, updated_at: nil, jurisdiction: nil, country_code: nil, end_date: nil, customer_id: nil, transaction_id: nil, reseller: false, fein: nil, sales_tax_id: nil, status: nil)
          @exemption_type = exemption_type
          @start_date = start_date
          @id = id
          @created_at = created_at
          @organization_id = organization_id
          @updated_at = updated_at
          @jurisdiction = jurisdiction
          @country_code = country_code
          @end_date = end_date
          @customer_id = customer_id
          @transaction_id = transaction_id
          @reseller = reseller
          @fein = fein
          @sales_tax_id = sales_tax_id
          @status = status
        end

        sig { params(other: T.untyped).returns(T::Boolean) }
        def ==(other)
          return false unless other.is_a? self.class
          T.cast(other, Exemption)
          return false unless @exemption_type == other.exemption_type
          return false unless @start_date == other.start_date
          return false unless @id == other.id
          return false unless @created_at == other.created_at
          return false unless @organization_id == other.organization_id
          return false unless @updated_at == other.updated_at
          return false unless @jurisdiction == other.jurisdiction
          return false unless @country_code == other.country_code
          return false unless @end_date == other.end_date
          return false unless @customer_id == other.customer_id
          return false unless @transaction_id == other.transaction_id
          return false unless @reseller == other.reseller
          return false unless @fein == other.fein
          return false unless @sales_tax_id == other.sales_tax_id
          return false unless @status == other.status
          true
        end
      end
    end
  end
end

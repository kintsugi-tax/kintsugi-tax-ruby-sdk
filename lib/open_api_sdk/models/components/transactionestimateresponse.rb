# Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

# typed: true
# frozen_string_literal: true


module OpenApiSDK
  module Models
    module Components
    

      class TransactionEstimateResponse
        extend T::Sig
        include Crystalline::MetadataFields

        # The date of the transaction in ISO 8601 format (e.g., 2025-01-25T12:00:00Z).
        field :date, ::DateTime, { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('date'), required: true, 'decoder': Utils.datetime_from_iso_format(false) } }
        # Unique identifier of this transaction in the source system.
        field :external_id, ::String, { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('external_id'), required: true } }

        field :currency, Models::Components::CurrencyEnum, { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('currency'), required: true, 'decoder': Utils.enum_from_string(Models::Components::CurrencyEnum, false) } }
        # List of addresses related to the transaction. At least one BILL_TO or SHIP_TO address must be provided. The address will be validated during estimation, and the transaction may be rejected if the address does not pass validation. The SHIP_TO will be preferred to use for determining tax liability. **Deprecated:** Use of `address.status` in estimate api is ignored and will be removed in the future status will be considered UNVERIFIED by default and always validated
        field :addresses, T::Array[Models::Components::TransactionEstimateResponseAddress], { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('addresses'), required: true } }

        field :transaction_items, T::Array[Models::Components::TransactionItemEstimateResponse], { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('transaction_items'), required: true } }
        # Total amount of the transaction.
        field :total_amount, T.nilable(::String), { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('total_amount') } }
        # An optional description of the transaction.
        field :description, T.nilable(::String), { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('description') } }
        # While currently not used, it may be used in the future to determine taxability. The source of the transaction (e.g., OTHER).
        # 
        # @deprecated  true: This will be removed in a future release, please migrate away from it as soon as possible.
        field :source, T.nilable(Models::Components::SourceEnum), { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('source'), 'decoder': Utils.enum_from_string(Models::Components::SourceEnum, true) } }
        # Indicates if the transaction involves a marketplace.
        field :marketplace, T.nilable(T::Boolean), { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('marketplace') } }
        # Details about the customer. If the customer is not found, it will be ignored.
        field :customer, T.nilable(Models::Components::CustomerBaseOutput), { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('customer') } }
        # The total amount of tax determined for the transaction.
        field :total_tax_amount_calculated, T.nilable(::String), { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('total_tax_amount_calculated') } }
        # The taxable amount for the transaction.
        field :taxable_amount, T.nilable(::String), { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('taxable_amount') } }
        # The calculated tax rate for the transaction.
        field :tax_rate_calculated, T.nilable(::String), { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('tax_rate_calculated') } }
        # Indicates if nexus was met for the transaction.**Deprecated:** Use `has_active_registration` instead.
        # 
        # @deprecated  true: This will be removed in a future release, please migrate away from it as soon as possible.
        field :nexus_met, T.nilable(T::Boolean), { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('nexus_met') } }
        # Indicates if there is an active registration for the transaction.
        field :has_active_registration, T.nilable(T::Boolean), { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('has_active_registration') } }

        sig { params(date: ::DateTime, external_id: ::String, currency: Models::Components::CurrencyEnum, addresses: T::Array[Models::Components::TransactionEstimateResponseAddress], transaction_items: T::Array[Models::Components::TransactionItemEstimateResponse], total_amount: T.nilable(::String), description: T.nilable(::String), source: T.nilable(Models::Components::SourceEnum), marketplace: T.nilable(T::Boolean), customer: T.nilable(Models::Components::CustomerBaseOutput), total_tax_amount_calculated: T.nilable(::String), taxable_amount: T.nilable(::String), tax_rate_calculated: T.nilable(::String), nexus_met: T.nilable(T::Boolean), has_active_registration: T.nilable(T::Boolean)).void }
        def initialize(date:, external_id:, currency:, addresses:, transaction_items:, total_amount: '0.0', description: nil, source: nil, marketplace: nil, customer: nil, total_tax_amount_calculated: '0.00', taxable_amount: '0.00', tax_rate_calculated: '0.00', nexus_met: false, has_active_registration: false)
          @date = date
          @external_id = external_id
          @currency = currency
          @addresses = addresses
          @transaction_items = transaction_items
          @total_amount = total_amount
          @description = description
          @source = source
          @marketplace = marketplace
          @customer = customer
          @total_tax_amount_calculated = total_tax_amount_calculated
          @taxable_amount = taxable_amount
          @tax_rate_calculated = tax_rate_calculated
          @nexus_met = nexus_met
          @has_active_registration = has_active_registration
        end

        sig { params(other: T.untyped).returns(T::Boolean) }
        def ==(other)
          return false unless other.is_a? self.class
          T.cast(other, TransactionEstimateResponse)
          return false unless @date == other.date
          return false unless @external_id == other.external_id
          return false unless @currency == other.currency
          return false unless @addresses == other.addresses
          return false unless @transaction_items == other.transaction_items
          return false unless @total_amount == other.total_amount
          return false unless @description == other.description
          return false unless @source == other.source
          return false unless @marketplace == other.marketplace
          return false unless @customer == other.customer
          return false unless @total_tax_amount_calculated == other.total_tax_amount_calculated
          return false unless @taxable_amount == other.taxable_amount
          return false unless @tax_rate_calculated == other.tax_rate_calculated
          return false unless @nexus_met == other.nexus_met
          return false unless @has_active_registration == other.has_active_registration
          true
        end
      end
    end
  end
end

# Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

# typed: true
# frozen_string_literal: true


module OpenApiSDK
  module Models
    module Components
    

      class NexusResponse
        extend T::Sig
        include Crystalline::MetadataFields


        field :country_code, Models::Components::CountryCodeEnum, { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('country_code'), required: true, 'decoder': Utils.enum_from_string(Models::Components::CountryCodeEnum, false) } }

        field :state_code, ::String, { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('state_code'), required: true } }

        field :state_name, ::String, { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('state_name'), required: true } }

        field :treatment_of_exempt_transactions, Models::Components::TreatmentEnum, { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('treatment_of_exempt_transactions'), required: true, 'decoder': Utils.enum_from_string(Models::Components::TreatmentEnum, false) } }

        field :trigger, ::String, { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('trigger'), required: true } }

        field :sales_or_transactions, Models::Components::SalesOrTransactionsEnum, { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('sales_or_transactions'), required: true, 'decoder': Utils.enum_from_string(Models::Components::SalesOrTransactionsEnum, false) } }

        field :threshold_sales, ::Integer, { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('threshold_sales'), required: true } }

        field :start_date, ::Date, { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('start_date'), required: true, 'decoder': Utils.date_from_iso_format(false) } }

        field :period_model, Models::Components::PeriodModelEnum, { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('period_model'), required: true, 'decoder': Utils.enum_from_string(Models::Components::PeriodModelEnum, false) } }

        field :period_start_date, ::Date, { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('period_start_date'), required: true, 'decoder': Utils.date_from_iso_format(false) } }

        field :period_end_date, ::Date, { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('period_end_date'), required: true, 'decoder': Utils.date_from_iso_format(false) } }

        field :id, ::String, { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('id'), required: true } }

        field :created_at, ::DateTime, { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('created_at'), required: true, 'decoder': Utils.datetime_from_iso_format(false) } }

        field :updated_at, ::DateTime, { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('updated_at'), required: true, 'decoder': Utils.datetime_from_iso_format(false) } }

        field :organization_id, ::String, { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('organization_id'), required: true } }

        field :is_vda_eligible, T::Boolean, { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('is_vda_eligible'), required: true } }

        field :nexus_type, Models::Components::NexusTypeEnum, { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('nexus_type'), required: true, 'decoder': Utils.enum_from_string(Models::Components::NexusTypeEnum, false) } }

        field :total_transactions, ::Integer, { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('total_transactions'), required: true } }

        field :total_transactions_included, ::Integer, { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('total_transactions_included'), required: true } }

        field :total_transactions_exempted, ::Integer, { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('total_transactions_exempted'), required: true } }

        field :total_transactions_marketplace, ::Integer, { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('total_transactions_marketplace'), required: true } }

        field :processing_status, T.nilable(Models::Components::NexusStatusEnum), { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('processing_status'), 'decoder': Utils.enum_from_string(Models::Components::NexusStatusEnum, true) } }

        field :status, T.nilable(Models::Components::NexusStateEnum), { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('status'), 'decoder': Utils.enum_from_string(Models::Components::NexusStateEnum, true) } }

        field :threshold_transactions, T.nilable(::Integer), { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('threshold_transactions'), required: true } }

        field :previous_period_start_date, T.nilable(::Date), { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('previous_period_start_date'), required: true, 'decoder': Utils.date_from_iso_format(false) } }

        field :previous_period_end_date, T.nilable(::Date), { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('previous_period_end_date'), required: true, 'decoder': Utils.date_from_iso_format(false) } }

        field :transaction_count, T.nilable(::Integer), { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('transaction_count') } }

        field :transactions_amount, T.nilable(::String), { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('transactions_amount') } }
        # Deprecated: transaction_count now includes both current and previous period values when period_model is CURRENT_OR_PREVIOUS
        # 
        # @deprecated  true: This will be removed in a future release, please migrate away from it as soon as possible.
        field :previous_transaction_count, T.nilable(::Integer), { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('previous_transaction_count') } }
        # Deprecated: transactions_amount now includes both current and previous period values when period_model is CURRENT_OR_PREVIOUS
        # 
        # @deprecated  true: This will be removed in a future release, please migrate away from it as soon as possible.
        field :previous_transactions_amount, T.nilable(::String), { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('previous_transactions_amount') } }

        field :calculated_tax_liability, T.nilable(::String), { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('calculated_tax_liability') } }

        field :imported_tax_liability, T.nilable(::String), { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('imported_tax_liability') } }

        field :tax_liability, T.nilable(::String), { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('tax_liability') } }

        field :nexus_met, T.nilable(T::Boolean), { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('nexus_met') } }

        field :nexus_met_date, T.nilable(::Date), { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('nexus_met_date'), 'decoder': Utils.date_from_iso_format(true) } }

        field :economic_nexus_met, T.nilable(T::Boolean), { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('economic_nexus_met') } }

        field :economic_nexus_met_date, T.nilable(::Date), { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('economic_nexus_met_date'), 'decoder': Utils.date_from_iso_format(true) } }

        field :physical_nexus_met, T.nilable(T::Boolean), { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('physical_nexus_met') } }

        field :physical_nexus_met_date, T.nilable(::Date), { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('physical_nexus_met_date'), 'decoder': Utils.date_from_iso_format(true) } }

        field :collected_tax_nexus_met, T.nilable(T::Boolean), { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('collected_tax_nexus_met') } }

        field :collected_tax_nexus_met_date, T.nilable(::Date), { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('collected_tax_nexus_met_date'), 'decoder': Utils.date_from_iso_format(true) } }

        field :collected_tax_enabled, T.nilable(T::Boolean), { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('collected_tax_enabled') } }

        field :earliest_transaction_date, T.nilable(::DateTime), { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('earliest_transaction_date'), 'decoder': Utils.datetime_from_iso_format(true) } }

        field :most_recent_transaction_date, T.nilable(::DateTime), { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('most_recent_transaction_date'), 'decoder': Utils.datetime_from_iso_format(true) } }

        field :earliest_collected_date, T.nilable(::DateTime), { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('earliest_collected_date'), 'decoder': Utils.datetime_from_iso_format(true) } }

        field :predicted_month_from_today, T.nilable(::Integer), { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('predicted_month_from_today') } }

        field :vda_eligible, T.nilable(T::Boolean), { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('vda_eligible') } }

        field :confidence_level, T.nilable(::Float), { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('confidence_level') } }

        field :last_processed_at, T.nilable(::DateTime), { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('last_processed_at'), 'decoder': Utils.datetime_from_iso_format(true) } }

        field :periods, T.nilable(T::Array[T::Hash[Symbol, ::Object]]), { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('periods') } }
        # Currency code for the nexus (e.g., USD, CAD).
        field :currency, T.nilable(Models::Components::CurrencyEnum), { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('currency'), 'decoder': Utils.enum_from_string(Models::Components::CurrencyEnum, true) } }

        field :registration, T.nilable(T::Hash[Symbol, ::Object]), { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('registration') } }

        field :registration_regime, T.nilable(Models::Components::RegistrationsRegimeEnum), { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('registration_regime'), 'decoder': Utils.enum_from_string(Models::Components::RegistrationsRegimeEnum, true) } }

        sig { params(country_code: Models::Components::CountryCodeEnum, state_code: ::String, state_name: ::String, treatment_of_exempt_transactions: Models::Components::TreatmentEnum, trigger: ::String, sales_or_transactions: Models::Components::SalesOrTransactionsEnum, threshold_sales: ::Integer, start_date: ::Date, period_model: Models::Components::PeriodModelEnum, period_start_date: ::Date, period_end_date: ::Date, id: ::String, created_at: ::DateTime, updated_at: ::DateTime, organization_id: ::String, is_vda_eligible: T::Boolean, nexus_type: Models::Components::NexusTypeEnum, total_transactions: ::Integer, total_transactions_included: ::Integer, total_transactions_exempted: ::Integer, total_transactions_marketplace: ::Integer, processing_status: T.nilable(Models::Components::NexusStatusEnum), status: T.nilable(Models::Components::NexusStateEnum), threshold_transactions: T.nilable(::Integer), previous_period_start_date: T.nilable(::Date), previous_period_end_date: T.nilable(::Date), transaction_count: T.nilable(::Integer), transactions_amount: T.nilable(::String), previous_transaction_count: T.nilable(::Integer), previous_transactions_amount: T.nilable(::String), calculated_tax_liability: T.nilable(::String), imported_tax_liability: T.nilable(::String), tax_liability: T.nilable(::String), nexus_met: T.nilable(T::Boolean), nexus_met_date: T.nilable(::Date), economic_nexus_met: T.nilable(T::Boolean), economic_nexus_met_date: T.nilable(::Date), physical_nexus_met: T.nilable(T::Boolean), physical_nexus_met_date: T.nilable(::Date), collected_tax_nexus_met: T.nilable(T::Boolean), collected_tax_nexus_met_date: T.nilable(::Date), collected_tax_enabled: T.nilable(T::Boolean), earliest_transaction_date: T.nilable(::DateTime), most_recent_transaction_date: T.nilable(::DateTime), earliest_collected_date: T.nilable(::DateTime), predicted_month_from_today: T.nilable(::Integer), vda_eligible: T.nilable(T::Boolean), confidence_level: T.nilable(::Float), last_processed_at: T.nilable(::DateTime), periods: T.nilable(T::Array[T::Hash[Symbol, ::Object]]), currency: T.nilable(Models::Components::CurrencyEnum), registration: T.nilable(T::Hash[Symbol, ::Object]), registration_regime: T.nilable(Models::Components::RegistrationsRegimeEnum)).void }
        def initialize(country_code:, state_code:, state_name:, treatment_of_exempt_transactions:, trigger:, sales_or_transactions:, threshold_sales:, start_date:, period_model:, period_start_date:, period_end_date:, id:, created_at:, updated_at:, organization_id:, is_vda_eligible:, nexus_type:, total_transactions:, total_transactions_included:, total_transactions_exempted:, total_transactions_marketplace:, processing_status: nil, status: nil, threshold_transactions: nil, previous_period_start_date: nil, previous_period_end_date: nil, transaction_count: 0, transactions_amount: '0.00', previous_transaction_count: 0, previous_transactions_amount: '0.00', calculated_tax_liability: nil, imported_tax_liability: nil, tax_liability: '0.00', nexus_met: false, nexus_met_date: nil, economic_nexus_met: false, economic_nexus_met_date: nil, physical_nexus_met: false, physical_nexus_met_date: nil, collected_tax_nexus_met: nil, collected_tax_nexus_met_date: nil, collected_tax_enabled: false, earliest_transaction_date: nil, most_recent_transaction_date: nil, earliest_collected_date: DateTime.iso8601('2018-01-01T00:00:00'), predicted_month_from_today: nil, vda_eligible: nil, confidence_level: nil, last_processed_at: nil, periods: nil, currency: nil, registration: nil, registration_regime: nil)
          @country_code = country_code
          @state_code = state_code
          @state_name = state_name
          @treatment_of_exempt_transactions = treatment_of_exempt_transactions
          @trigger = trigger
          @sales_or_transactions = sales_or_transactions
          @threshold_sales = threshold_sales
          @start_date = start_date
          @period_model = period_model
          @period_start_date = period_start_date
          @period_end_date = period_end_date
          @id = id
          @created_at = created_at
          @updated_at = updated_at
          @organization_id = organization_id
          @is_vda_eligible = is_vda_eligible
          @nexus_type = nexus_type
          @total_transactions = total_transactions
          @total_transactions_included = total_transactions_included
          @total_transactions_exempted = total_transactions_exempted
          @total_transactions_marketplace = total_transactions_marketplace
          @processing_status = processing_status
          @status = status
          @threshold_transactions = threshold_transactions
          @previous_period_start_date = previous_period_start_date
          @previous_period_end_date = previous_period_end_date
          @transaction_count = transaction_count
          @transactions_amount = transactions_amount
          @previous_transaction_count = previous_transaction_count
          @previous_transactions_amount = previous_transactions_amount
          @calculated_tax_liability = calculated_tax_liability
          @imported_tax_liability = imported_tax_liability
          @tax_liability = tax_liability
          @nexus_met = nexus_met
          @nexus_met_date = nexus_met_date
          @economic_nexus_met = economic_nexus_met
          @economic_nexus_met_date = economic_nexus_met_date
          @physical_nexus_met = physical_nexus_met
          @physical_nexus_met_date = physical_nexus_met_date
          @collected_tax_nexus_met = collected_tax_nexus_met
          @collected_tax_nexus_met_date = collected_tax_nexus_met_date
          @collected_tax_enabled = collected_tax_enabled
          @earliest_transaction_date = earliest_transaction_date
          @most_recent_transaction_date = most_recent_transaction_date
          @earliest_collected_date = earliest_collected_date
          @predicted_month_from_today = predicted_month_from_today
          @vda_eligible = vda_eligible
          @confidence_level = confidence_level
          @last_processed_at = last_processed_at
          @periods = periods
          @currency = currency
          @registration = registration
          @registration_regime = registration_regime
        end

        sig { params(other: T.untyped).returns(T::Boolean) }
        def ==(other)
          return false unless other.is_a? self.class
          T.cast(other, NexusResponse)
          return false unless @country_code == other.country_code
          return false unless @state_code == other.state_code
          return false unless @state_name == other.state_name
          return false unless @treatment_of_exempt_transactions == other.treatment_of_exempt_transactions
          return false unless @trigger == other.trigger
          return false unless @sales_or_transactions == other.sales_or_transactions
          return false unless @threshold_sales == other.threshold_sales
          return false unless @start_date == other.start_date
          return false unless @period_model == other.period_model
          return false unless @period_start_date == other.period_start_date
          return false unless @period_end_date == other.period_end_date
          return false unless @id == other.id
          return false unless @created_at == other.created_at
          return false unless @updated_at == other.updated_at
          return false unless @organization_id == other.organization_id
          return false unless @is_vda_eligible == other.is_vda_eligible
          return false unless @nexus_type == other.nexus_type
          return false unless @total_transactions == other.total_transactions
          return false unless @total_transactions_included == other.total_transactions_included
          return false unless @total_transactions_exempted == other.total_transactions_exempted
          return false unless @total_transactions_marketplace == other.total_transactions_marketplace
          return false unless @processing_status == other.processing_status
          return false unless @status == other.status
          return false unless @threshold_transactions == other.threshold_transactions
          return false unless @previous_period_start_date == other.previous_period_start_date
          return false unless @previous_period_end_date == other.previous_period_end_date
          return false unless @transaction_count == other.transaction_count
          return false unless @transactions_amount == other.transactions_amount
          return false unless @previous_transaction_count == other.previous_transaction_count
          return false unless @previous_transactions_amount == other.previous_transactions_amount
          return false unless @calculated_tax_liability == other.calculated_tax_liability
          return false unless @imported_tax_liability == other.imported_tax_liability
          return false unless @tax_liability == other.tax_liability
          return false unless @nexus_met == other.nexus_met
          return false unless @nexus_met_date == other.nexus_met_date
          return false unless @economic_nexus_met == other.economic_nexus_met
          return false unless @economic_nexus_met_date == other.economic_nexus_met_date
          return false unless @physical_nexus_met == other.physical_nexus_met
          return false unless @physical_nexus_met_date == other.physical_nexus_met_date
          return false unless @collected_tax_nexus_met == other.collected_tax_nexus_met
          return false unless @collected_tax_nexus_met_date == other.collected_tax_nexus_met_date
          return false unless @collected_tax_enabled == other.collected_tax_enabled
          return false unless @earliest_transaction_date == other.earliest_transaction_date
          return false unless @most_recent_transaction_date == other.most_recent_transaction_date
          return false unless @earliest_collected_date == other.earliest_collected_date
          return false unless @predicted_month_from_today == other.predicted_month_from_today
          return false unless @vda_eligible == other.vda_eligible
          return false unless @confidence_level == other.confidence_level
          return false unless @last_processed_at == other.last_processed_at
          return false unless @periods == other.periods
          return false unless @currency == other.currency
          return false unless @registration == other.registration
          return false unless @registration_regime == other.registration_regime
          true
        end
      end
    end
  end
end

# Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

# typed: true
# frozen_string_literal: true


module OpenApiSDK
  module Models
    module Components
    

      class TransactionAddressReadOutput
        extend T::Sig
        include Crystalline::MetadataFields


        field :type, Models::Components::AddressType, { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('type'), required: true, 'decoder': Utils.enum_from_string(Models::Components::AddressType, false) } }

        field :status, T.nilable(Models::Components::AddressStatus), { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('status'), 'decoder': Utils.enum_from_string(Models::Components::AddressStatus, true) } }
        # Phone number associated with the address.
        field :phone, T.nilable(::String), { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('phone') } }
        # Primary street address.
        field :street_1, T.nilable(::String), { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('street_1') } }
        # Additional street address details, such as an apartment or suite number.
        field :street_2, T.nilable(::String), { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('street_2') } }
        # City where the customer resides.
        field :city, T.nilable(::String), { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('city') } }
        # County or district of the customer.
        field :county, T.nilable(::String), { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('county') } }
        # State or province of the customer.
        field :state, T.nilable(::String), { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('state') } }
        # ZIP or Postal code of the customer.
        field :postal_code, T.nilable(::String), { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('postal_code') } }
        # Country code in ISO 3166-1 alpha-2 format
        field :country, T.nilable(Models::Components::CountryCodeEnum), { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('country'), 'decoder': Utils.enum_from_string(Models::Components::CountryCodeEnum, true) } }
        # Complete address string of the customer, which can be used as an alternative to individual fields.
        field :full_address, T.nilable(::String), { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('full_address') } }
        # Unique identifier of the address being updated.
        field :id, T.nilable(::String), { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('id') } }
        # ID of the transaction associated with the address.
        field :transaction_id, T.nilable(::String), { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('transaction_id') } }
        # ID of the connection associated with the address.
        field :connection_id, T.nilable(::String), { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('connection_id') } }

        sig { params(type: Models::Components::AddressType, status: T.nilable(Models::Components::AddressStatus), phone: T.nilable(::String), street_1: T.nilable(::String), street_2: T.nilable(::String), city: T.nilable(::String), county: T.nilable(::String), state: T.nilable(::String), postal_code: T.nilable(::String), country: T.nilable(Models::Components::CountryCodeEnum), full_address: T.nilable(::String), id: T.nilable(::String), transaction_id: T.nilable(::String), connection_id: T.nilable(::String)).void }
        def initialize(type:, status: nil, phone: nil, street_1: nil, street_2: nil, city: nil, county: nil, state: nil, postal_code: nil, country: nil, full_address: nil, id: nil, transaction_id: nil, connection_id: nil)
          @type = type
          @status = status
          @phone = phone
          @street_1 = street_1
          @street_2 = street_2
          @city = city
          @county = county
          @state = state
          @postal_code = postal_code
          @country = country
          @full_address = full_address
          @id = id
          @transaction_id = transaction_id
          @connection_id = connection_id
        end

        sig { params(other: T.untyped).returns(T::Boolean) }
        def ==(other)
          return false unless other.is_a? self.class
          T.cast(other, TransactionAddressReadOutput)
          return false unless @type == other.type
          return false unless @status == other.status
          return false unless @phone == other.phone
          return false unless @street_1 == other.street_1
          return false unless @street_2 == other.street_2
          return false unless @city == other.city
          return false unless @county == other.county
          return false unless @state == other.state
          return false unless @postal_code == other.postal_code
          return false unless @country == other.country
          return false unless @full_address == other.full_address
          return false unless @id == other.id
          return false unless @transaction_id == other.transaction_id
          return false unless @connection_id == other.connection_id
          true
        end
      end
    end
  end
end

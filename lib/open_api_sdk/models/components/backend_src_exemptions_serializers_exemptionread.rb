# Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

# typed: true
# frozen_string_literal: true


module OpenApiSDK
  module Models
    module Components
    

      class BackendSrcExemptionsSerializersExemptionRead
        extend T::Sig
        include Crystalline::MetadataFields

        # Start date for the exemption validity period (YYYY-MM-DD format)
        field :start_date, ::Date, { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('start_date'), required: true, 'decoder': Utils.date_from_iso_format(false) } }
        # Unique identifier for the exemption
        field :id, ::String, { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('id'), required: true } }

        field :exemption_type, Models::Components::ExemptionType, { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('exemption_type'), required: true, 'decoder': Utils.enum_from_string(Models::Components::ExemptionType, false) } }

        field :status, Models::Components::ExemptionStatus, { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('status'), required: true, 'decoder': Utils.enum_from_string(Models::Components::ExemptionStatus, false) } }
        # Country code in ISO 3166-1 alpha-2 format (e.g., 'US')
        field :country_code, T.nilable(Models::Components::CountryCodeEnum), { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('country_code'), 'decoder': Utils.enum_from_string(Models::Components::CountryCodeEnum, true) } }
        # The jurisdiction identifier for the exemption
        field :jurisdiction, T.nilable(::String), { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('jurisdiction') } }
        # End date for the exemption validity period (YYYY-MM-DD format)
        field :end_date, T.nilable(::Date), { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('end_date'), 'decoder': Utils.date_from_iso_format(true) } }
        # Unique identifier for the transaction, if applicable
        field :transaction_id, T.nilable(::String), { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('transaction_id') } }
        # Indicates whether the exemption is for a reseller
        field :reseller, T.nilable(T::Boolean), { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('reseller') } }
        # Federal Employer Identification Number
        field :fein, T.nilable(::String), { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('FEIN') } }
        # Sales tax ID for the exemption
        field :sales_tax_id, T.nilable(::String), { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('sales_tax_id') } }
        # Details of the customer associated with the exemption
        field :customer, T.nilable(Models::Components::CustomerRead), { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('customer') } }
        # List of attachments related to the exemption
        field :attachment, T.nilable(T::Array[Models::Components::AttachmentRead]), { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('attachment') } }

        sig { params(start_date: ::Date, id: ::String, exemption_type: Models::Components::ExemptionType, status: Models::Components::ExemptionStatus, country_code: T.nilable(Models::Components::CountryCodeEnum), jurisdiction: T.nilable(::String), end_date: T.nilable(::Date), transaction_id: T.nilable(::String), reseller: T.nilable(T::Boolean), fein: T.nilable(::String), sales_tax_id: T.nilable(::String), customer: T.nilable(Models::Components::CustomerRead), attachment: T.nilable(T::Array[Models::Components::AttachmentRead])).void }
        def initialize(start_date:, id:, exemption_type:, status:, country_code: nil, jurisdiction: nil, end_date: nil, transaction_id: nil, reseller: false, fein: nil, sales_tax_id: nil, customer: nil, attachment: nil)
          @start_date = start_date
          @id = id
          @exemption_type = exemption_type
          @status = status
          @country_code = country_code
          @jurisdiction = jurisdiction
          @end_date = end_date
          @transaction_id = transaction_id
          @reseller = reseller
          @fein = fein
          @sales_tax_id = sales_tax_id
          @customer = customer
          @attachment = attachment
        end

        sig { params(other: T.untyped).returns(T::Boolean) }
        def ==(other)
          return false unless other.is_a? self.class
          T.cast(other, BackendSrcExemptionsSerializersExemptionRead)
          return false unless @start_date == other.start_date
          return false unless @id == other.id
          return false unless @exemption_type == other.exemption_type
          return false unless @status == other.status
          return false unless @country_code == other.country_code
          return false unless @jurisdiction == other.jurisdiction
          return false unless @end_date == other.end_date
          return false unless @transaction_id == other.transaction_id
          return false unless @reseller == other.reseller
          return false unless @fein == other.fein
          return false unless @sales_tax_id == other.sales_tax_id
          return false unless @customer == other.customer
          return false unless @attachment == other.attachment
          true
        end
      end
    end
  end
end

# Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

# typed: true
# frozen_string_literal: true


module OpenApiSDK
  module Models
    module Components
    

      class ValidationError
        extend T::Sig
        include Crystalline::MetadataFields


        field :loc, T::Array[T.any(::String, ::Integer)], { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('loc'), required: true } }

        field :msg, ::String, { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('msg'), required: true } }

        field :type, ::String, { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('type'), required: true } }

        sig { params(loc: T::Array[T.any(::String, ::Integer)], msg: ::String, type: ::String).void }
        def initialize(loc:, msg:, type:)
          @loc = loc
          @msg = msg
          @type = type
        end

        sig { params(other: T.untyped).returns(T::Boolean) }
        def ==(other)
          return false unless other.is_a? self.class
          T.cast(other, ValidationError)
          return false unless @loc == other.loc
          return false unless @msg == other.msg
          return false unless @type == other.type
          true
        end
      end
    end
  end
end

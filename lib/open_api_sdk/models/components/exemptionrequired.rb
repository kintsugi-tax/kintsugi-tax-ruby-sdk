# Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

# typed: true
# frozen_string_literal: true


module OpenApiSDK
  module Models
    module Components
    

      class ExemptionRequired
        extend T::Sig
        include Crystalline::MetadataFields


        field :organization_id, ::String, { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('organization_id'), required: true } }

        field :exemption_type, Models::Components::ExemptionType, { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('exemption_type'), required: true, 'decoder': Utils.enum_from_string(Models::Components::ExemptionType, false) } }

        field :start_date, ::DateTime, { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('start_date'), required: true, 'decoder': Utils.datetime_from_iso_format(false) } }

        field :status, Models::Components::ExemptionStatus, { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('status'), required: true, 'decoder': Utils.enum_from_string(Models::Components::ExemptionStatus, false) } }

        field :reseller, T::Boolean, { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('reseller'), required: true } }

        field :jurisdiction, T.nilable(::String), { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('jurisdiction') } }

        field :customer_id, T.nilable(::String), { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('customer_id') } }

        sig { params(organization_id: ::String, exemption_type: Models::Components::ExemptionType, start_date: ::DateTime, status: Models::Components::ExemptionStatus, reseller: T::Boolean, jurisdiction: T.nilable(::String), customer_id: T.nilable(::String)).void }
        def initialize(organization_id:, exemption_type:, start_date:, status:, reseller:, jurisdiction: nil, customer_id: nil)
          @organization_id = organization_id
          @exemption_type = exemption_type
          @start_date = start_date
          @status = status
          @reseller = reseller
          @jurisdiction = jurisdiction
          @customer_id = customer_id
        end

        sig { params(other: T.untyped).returns(T::Boolean) }
        def ==(other)
          return false unless other.is_a? self.class
          T.cast(other, ExemptionRequired)
          return false unless @organization_id == other.organization_id
          return false unless @exemption_type == other.exemption_type
          return false unless @start_date == other.start_date
          return false unless @status == other.status
          return false unless @reseller == other.reseller
          return false unless @jurisdiction == other.jurisdiction
          return false unless @customer_id == other.customer_id
          true
        end
      end
    end
  end
end

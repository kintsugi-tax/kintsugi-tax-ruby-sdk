# typed: true
# frozen_string_literal: true


class OpenApiSDK::Models::Components::NexusResponse
  extend ::Crystalline::MetadataFields::ClassMethods
end


class OpenApiSDK::Models::Components::NexusResponse
  def country_code(); end
  def country_code=(str_); end
  def state_code(); end
  def state_code=(str_); end
  def state_name(); end
  def state_name=(str_); end
  def treatment_of_exempt_transactions(); end
  def treatment_of_exempt_transactions=(str_); end
  def trigger(); end
  def trigger=(str_); end
  def sales_or_transactions(); end
  def sales_or_transactions=(str_); end
  def threshold_sales(); end
  def threshold_sales=(str_); end
  def start_date(); end
  def start_date=(str_); end
  def period_model(); end
  def period_model=(str_); end
  def period_start_date(); end
  def period_start_date=(str_); end
  def period_end_date(); end
  def period_end_date=(str_); end
  def id(); end
  def id=(str_); end
  def created_at(); end
  def created_at=(str_); end
  def updated_at(); end
  def updated_at=(str_); end
  def organization_id(); end
  def organization_id=(str_); end
  def is_vda_eligible(); end
  def is_vda_eligible=(str_); end
  def nexus_type(); end
  def nexus_type=(str_); end
  def total_transactions(); end
  def total_transactions=(str_); end
  def total_transactions_included(); end
  def total_transactions_included=(str_); end
  def total_transactions_exempted(); end
  def total_transactions_exempted=(str_); end
  def total_transactions_marketplace(); end
  def total_transactions_marketplace=(str_); end
  def processing_status(); end
  def processing_status=(str_); end
  def status(); end
  def status=(str_); end
  def threshold_transactions(); end
  def threshold_transactions=(str_); end
  def previous_period_start_date(); end
  def previous_period_start_date=(str_); end
  def previous_period_end_date(); end
  def previous_period_end_date=(str_); end
  def transaction_count(); end
  def transaction_count=(str_); end
  def transactions_amount(); end
  def transactions_amount=(str_); end
  def previous_transaction_count(); end
  def previous_transaction_count=(str_); end
  def previous_transactions_amount(); end
  def previous_transactions_amount=(str_); end
  def calculated_tax_liability(); end
  def calculated_tax_liability=(str_); end
  def imported_tax_liability(); end
  def imported_tax_liability=(str_); end
  def tax_liability(); end
  def tax_liability=(str_); end
  def nexus_met(); end
  def nexus_met=(str_); end
  def nexus_met_date(); end
  def nexus_met_date=(str_); end
  def economic_nexus_met(); end
  def economic_nexus_met=(str_); end
  def economic_nexus_met_date(); end
  def economic_nexus_met_date=(str_); end
  def physical_nexus_met(); end
  def physical_nexus_met=(str_); end
  def physical_nexus_met_date(); end
  def physical_nexus_met_date=(str_); end
  def collected_tax_nexus_met(); end
  def collected_tax_nexus_met=(str_); end
  def collected_tax_nexus_met_date(); end
  def collected_tax_nexus_met_date=(str_); end
  def collected_tax_enabled(); end
  def collected_tax_enabled=(str_); end
  def earliest_transaction_date(); end
  def earliest_transaction_date=(str_); end
  def most_recent_transaction_date(); end
  def most_recent_transaction_date=(str_); end
  def earliest_collected_date(); end
  def earliest_collected_date=(str_); end
  def predicted_month_from_today(); end
  def predicted_month_from_today=(str_); end
  def vda_eligible(); end
  def vda_eligible=(str_); end
  def confidence_level(); end
  def confidence_level=(str_); end
  def last_processed_at(); end
  def last_processed_at=(str_); end
  def periods(); end
  def periods=(str_); end
  def currency(); end
  def currency=(str_); end
  def registration(); end
  def registration=(str_); end
  def registration_regime(); end
  def registration_regime=(str_); end
end
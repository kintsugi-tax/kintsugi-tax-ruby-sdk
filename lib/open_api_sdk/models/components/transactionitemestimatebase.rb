# Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

# typed: true
# frozen_string_literal: true


module OpenApiSDK
  module Models
    module Components
    

      class TransactionItemEstimateBase
        extend T::Sig
        include Crystalline::MetadataFields

        # The date of the transaction item.
        field :date, ::DateTime, { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('date'), required: true, 'decoder': Utils.datetime_from_iso_format(false) } }
        # The total amount of the item.
        field :amount, T.any(::Float, ::String), { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('amount'), required: true } }
        # Defaults to 1.0. The quantity of the item.
        field :quantity, T.nilable(T.any(::Float, ::String)), { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('quantity') } }
        # A unique identifier for the transaction item.
        field :external_id, T.nilable(::String), { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('external_id') } }
        # A description of the item.
        field :description, T.nilable(::String), { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('description') } }
        # External product identifier. If not found and product_subcategory
        #         and product_category are not provided, an error occurs.
        field :external_product_id, T.nilable(::String), { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('external_product_id') } }
        # Name of the product. Used if creating a new product.
        field :product_name, T.nilable(::String), { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('product_name') } }
        # Description of the product. Used if creating a new product.
        field :product_description, T.nilable(::String), { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('product_description') } }

        field :product_source, T.nilable(Models::Components::SourceEnum), { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('product_source'), 'decoder': Utils.enum_from_string(Models::Components::SourceEnum, true) } }
        # Subcategory of the product. Required if product_category is used
        #         in place of external_product_id.
        field :product_subcategory, T.nilable(Models::Components::ProductSubCategoryEnum), { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('product_subcategory'), 'decoder': Utils.enum_from_string(Models::Components::ProductSubCategoryEnum, true) } }
        # Category of the product. Required if product_subcategory is used
        #         in place of external_product_id.
        field :product_category, T.nilable(Models::Components::ProductCategoryEnum), { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('product_category'), 'decoder': Utils.enum_from_string(Models::Components::ProductCategoryEnum, true) } }
        # Defaults to false. Indicates whether the item is exempt from tax.
        field :exempt, T.nilable(T::Boolean), { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('exempt') } }

        sig { params(date: ::DateTime, amount: T.any(::Float, ::String), quantity: T.nilable(T.any(::Float, ::String)), external_id: T.nilable(::String), description: T.nilable(::String), external_product_id: T.nilable(::String), product_name: T.nilable(::String), product_description: T.nilable(::String), product_source: T.nilable(Models::Components::SourceEnum), product_subcategory: T.nilable(Models::Components::ProductSubCategoryEnum), product_category: T.nilable(Models::Components::ProductCategoryEnum), exempt: T.nilable(T::Boolean)).void }
        def initialize(date:, amount:, quantity: nil, external_id: nil, description: nil, external_product_id: nil, product_name: nil, product_description: nil, product_source: nil, product_subcategory: nil, product_category: nil, exempt: false)
          @date = date
          @amount = amount
          @quantity = quantity
          @external_id = external_id
          @description = description
          @external_product_id = external_product_id
          @product_name = product_name
          @product_description = product_description
          @product_source = product_source
          @product_subcategory = product_subcategory
          @product_category = product_category
          @exempt = exempt
        end

        sig { params(other: T.untyped).returns(T::Boolean) }
        def ==(other)
          return false unless other.is_a? self.class
          T.cast(other, TransactionItemEstimateBase)
          return false unless @date == other.date
          return false unless @amount == other.amount
          return false unless @quantity == other.quantity
          return false unless @external_id == other.external_id
          return false unless @description == other.description
          return false unless @external_product_id == other.external_product_id
          return false unless @product_name == other.product_name
          return false unless @product_description == other.product_description
          return false unless @product_source == other.product_source
          return false unless @product_subcategory == other.product_subcategory
          return false unless @product_category == other.product_category
          return false unless @exempt == other.exempt
          true
        end
      end
    end
  end
end

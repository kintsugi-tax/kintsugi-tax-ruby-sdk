# Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

# typed: true
# frozen_string_literal: true


module OpenApiSDK
  module Models
    module Components
    

      class ProductUpdateV2
        extend T::Sig
        include Crystalline::MetadataFields


        field :name, ::String, { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('name'), required: true } }

        field :status, Models::Components::ProductStatusEnum, { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('status'), required: true, 'decoder': Utils.enum_from_string(Models::Components::ProductStatusEnum, false) } }

        field :product_category, ::String, { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('product_category'), required: true } }

        field :product_subcategory, ::String, { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('product_subcategory'), required: true } }

        field :tax_exempt, T::Boolean, { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('tax_exempt'), required: true } }

        field :external_id, T.nilable(::String), { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('external_id') } }

        field :sku, T.nilable(T::Array[::String]), { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('sku') } }

        field :description, T.nilable(::String), { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('description') } }

        field :classification_failed, T.nilable(T::Boolean), { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('classification_failed') } }

        sig { params(name: ::String, status: Models::Components::ProductStatusEnum, product_category: ::String, product_subcategory: ::String, tax_exempt: T::Boolean, external_id: T.nilable(::String), sku: T.nilable(T::Array[::String]), description: T.nilable(::String), classification_failed: T.nilable(T::Boolean)).void }
        def initialize(name:, status:, product_category:, product_subcategory:, tax_exempt:, external_id: nil, sku: nil, description: nil, classification_failed: nil)
          @name = name
          @status = status
          @product_category = product_category
          @product_subcategory = product_subcategory
          @tax_exempt = tax_exempt
          @external_id = external_id
          @sku = sku
          @description = description
          @classification_failed = classification_failed
        end

        sig { params(other: T.untyped).returns(T::Boolean) }
        def ==(other)
          return false unless other.is_a? self.class
          T.cast(other, ProductUpdateV2)
          return false unless @name == other.name
          return false unless @status == other.status
          return false unless @product_category == other.product_category
          return false unless @product_subcategory == other.product_subcategory
          return false unless @tax_exempt == other.tax_exempt
          return false unless @external_id == other.external_id
          return false unless @sku == other.sku
          return false unless @description == other.description
          return false unless @classification_failed == other.classification_failed
          true
        end
      end
    end
  end
end

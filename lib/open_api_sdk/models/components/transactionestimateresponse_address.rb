# Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

# typed: true
# frozen_string_literal: true


module OpenApiSDK
  module Models
    module Components
    

      class TransactionEstimateResponseAddress
        extend T::Sig
        include Crystalline::MetadataFields

        # Type of the address. Must be either
        #                         SHIP_TO or BILL_TO.
        field :type, Models::Components::TransactionEstimateResponseType, { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('type'), required: true, 'decoder': Utils.enum_from_string(Models::Components::TransactionEstimateResponseType, false) } }
        # State or province of the address.
        field :state, ::String, { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('state'), required: true } }
        # Postal code of the address.
        field :postal_code, ::String, { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('postal_code'), required: true } }
        # Country of the address.
        field :country, ::String, { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('country'), required: true } }
        # Phone number associated with the customer.
        field :phone, T.nilable(::String), { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('phone') } }
        # Primary street address of the customer.
        field :street_1, T.nilable(::String), { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('street_1') } }
        # Additional street address details, such as an apartment or suite number.
        field :street_2, T.nilable(::String), { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('street_2') } }
        # City where the customer resides.
        field :city, T.nilable(::String), { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('city') } }
        # County or district of the customer.
        field :county, T.nilable(::String), { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('county') } }
        # Complete address string of the customer, which can be used as an alternative to individual fields.
        field :full_address, T.nilable(::String), { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('full_address') } }
        # Status of the address. Deprecated and ignored.
        # 
        # @deprecated  true: This will be removed in a future release, please migrate away from it as soon as possible.
        field :status, T.nilable(::String), { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('status') } }
        # Additional enriched fields related to the address.
        field :enriched_fields, T.nilable(::String), { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('enriched_fields') } }

        sig { params(type: Models::Components::TransactionEstimateResponseType, state: ::String, postal_code: ::String, country: ::String, phone: T.nilable(::String), street_1: T.nilable(::String), street_2: T.nilable(::String), city: T.nilable(::String), county: T.nilable(::String), full_address: T.nilable(::String), status: T.nilable(::String), enriched_fields: T.nilable(::String)).void }
        def initialize(type:, state:, postal_code:, country:, phone: nil, street_1: nil, street_2: nil, city: nil, county: nil, full_address: nil, status: nil, enriched_fields: nil)
          @type = type
          @state = state
          @postal_code = postal_code
          @country = country
          @phone = phone
          @street_1 = street_1
          @street_2 = street_2
          @city = city
          @county = county
          @full_address = full_address
          @status = status
          @enriched_fields = enriched_fields
        end

        sig { params(other: T.untyped).returns(T::Boolean) }
        def ==(other)
          return false unless other.is_a? self.class
          T.cast(other, TransactionEstimateResponseAddress)
          return false unless @type == other.type
          return false unless @state == other.state
          return false unless @postal_code == other.postal_code
          return false unless @country == other.country
          return false unless @phone == other.phone
          return false unless @street_1 == other.street_1
          return false unless @street_2 == other.street_2
          return false unless @city == other.city
          return false unless @county == other.county
          return false unless @full_address == other.full_address
          return false unless @status == other.status
          return false unless @enriched_fields == other.enriched_fields
          true
        end
      end
    end
  end
end

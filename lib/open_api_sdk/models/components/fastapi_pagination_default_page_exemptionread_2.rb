# Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

# typed: true
# frozen_string_literal: true


module OpenApiSDK
  module Models
    module Components
    

      class FastapiPaginationDefaultPageExemptionRead2
        extend T::Sig
        include Crystalline::MetadataFields


        field :items, T::Array[Models::Components::BackendSrcExemptionsModelsExemptionRead], { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('items'), required: true } }

        field :total, T.nilable(::Integer), { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('total'), required: true } }

        field :page, T.nilable(::Integer), { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('page'), required: true } }

        field :size, T.nilable(::Integer), { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('size'), required: true } }

        field :pages, T.nilable(::Integer), { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('pages') } }

        sig { params(items: T::Array[Models::Components::BackendSrcExemptionsModelsExemptionRead], total: T.nilable(::Integer), page: T.nilable(::Integer), size: T.nilable(::Integer), pages: T.nilable(::Integer)).void }
        def initialize(items:, total: nil, page: nil, size: nil, pages: nil)
          @items = items
          @total = total
          @page = page
          @size = size
          @pages = pages
        end

        sig { params(other: T.untyped).returns(T::Boolean) }
        def ==(other)
          return false unless other.is_a? self.class
          T.cast(other, FastapiPaginationDefaultPageExemptionRead2)
          return false unless @items == other.items
          return false unless @total == other.total
          return false unless @page == other.page
          return false unless @size == other.size
          return false unless @pages == other.pages
          true
        end
      end
    end
  end
end

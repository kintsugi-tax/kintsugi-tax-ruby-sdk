# Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

# typed: true
# frozen_string_literal: true


module OpenApiSDK
  module Models
    module Components
    

      class TransactionRead
        extend T::Sig
        include Crystalline::MetadataFields

        # Unique identifier of the organization.
        field :organization_id, ::String, { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('organization_id'), required: true } }
        # External identifier of the transaction.
        field :external_id, ::String, { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('external_id'), required: true } }
        # Transaction date and time
        field :date, ::DateTime, { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('date'), required: true, 'decoder': Utils.datetime_from_iso_format(false) } }
        # The unique transaction identifier.
        field :id, ::String, { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('id'), required: true } }
        # List of addresses associated.
        field :addresses, T::Array[Models::Components::TransactionAddressReadOutput], { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('addresses'), required: true } }
        # List of items in the transaction.
        field :transaction_items, T::Array[Models::Components::TransactionItemRead], { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('transaction_items'), required: true } }

        field :type, Models::Components::TransactionTypeEnum, { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('type'), required: true, 'decoder': Utils.enum_from_string(Models::Components::TransactionTypeEnum, false) } }

        field :status, T.nilable(Models::Components::TransactionStatusEnum), { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('status'), 'decoder': Utils.enum_from_string(Models::Components::TransactionStatusEnum, true) } }

        field :currency, T.nilable(Models::Components::CurrencyEnum), { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('currency'), 'decoder': Utils.enum_from_string(Models::Components::CurrencyEnum, true) } }

        field :source, T.nilable(Models::Components::SourceEnum), { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('source'), 'decoder': Utils.enum_from_string(Models::Components::SourceEnum, true) } }

        field :address_status, T.nilable(Models::Components::AddressStatus), { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('address_status'), 'decoder': Utils.enum_from_string(Models::Components::AddressStatus, true) } }
        # Our transaction state, used to determine when/if a transaction needs additional
        # processing.
        field :processing_status, T.nilable(Models::Components::ProcessingStatusEnum), { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('processing_status'), 'decoder': Utils.enum_from_string(Models::Components::ProcessingStatusEnum, true) } }
        # Indicates if transaction requires tax exemption.
        field :requires_exemption, T.nilable(Models::Components::ExemptionRequired), { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('requires_exemption') } }
        # Transaction date in the shop's local timezone
        field :shop_date, T.nilable(::Date), { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('shop_date'), 'decoder': Utils.date_from_iso_format(true) } }
        # Timezone of the shop
        field :shop_date_tz, T.nilable(::String), { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('shop_date_tz') } }
        # Description of the transaction.
        field :description, T.nilable(::String), { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('description') } }
        # Status of refund, if applicable
        field :refund_status, T.nilable(Models::Components::TransactionRefundStatus), { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('refund_status'), 'decoder': Utils.enum_from_string(Models::Components::TransactionRefundStatus, true) } }
        # Total amount of the transaction.
        field :total_amount, T.nilable(::String), { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('total_amount') } }
        # Unique identifier of the customer.
        field :customer_id, T.nilable(::String), { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('customer_id') } }
        # Indicates if transaction is marketplace-based.
        field :marketplace, T.nilable(T::Boolean), { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('marketplace') } }
        # Exemption status (e.g., NOT_EXEMPT)
        field :exempt, T.nilable(Models::Components::TransactionExemptStatusEnum), { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('exempt'), 'decoder': Utils.enum_from_string(Models::Components::TransactionExemptStatusEnum, true) } }
        # List of exemptions applied (if any).
        field :exemptions, T.nilable(T::Array[Models::Components::Exemption]), { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('exemptions') } }
        # Related transaction identifier.
        field :related_to, T.nilable(::String), { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('related_to') } }
        # Secondary External Identifier.
        field :secondary_external_id, T.nilable(::String), { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('secondary_external_id') } }
        # Secondary source information
        field :secondary_source, T.nilable(::String), { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('secondary_source') } }
        # Friendly identifier of the original item.
        field :external_friendly_id, T.nilable(::String), { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('external_friendly_id') } }
        # Imported tax amount.
        field :total_tax_amount_imported, T.nilable(::String), { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('total_tax_amount_imported') } }
        # Imported tax rate.
        field :tax_rate_imported, T.nilable(::String), { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('tax_rate_imported') } }
        # Calculated tax amount.
        field :total_tax_amount_calculated, T.nilable(::String), { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('total_tax_amount_calculated') } }
        # Calculated tax rate.
        field :tax_rate_calculated, T.nilable(::String), { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('tax_rate_calculated') } }
        # Total tax liability amount.
        field :total_tax_liability_amount, T.nilable(::String), { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('total_tax_liability_amount') } }
        # Source of tax liability.
        field :tax_liability_source, T.nilable(Models::Components::TaxLiabilitySourceEnum), { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('tax_liability_source'), 'decoder': Utils.enum_from_string(Models::Components::TaxLiabilitySourceEnum, true) } }
        # Taxable amount.
        field :taxable_amount, T.nilable(::String), { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('taxable_amount') } }
        # Transaction lock status.
        field :locked, T.nilable(T::Boolean), { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('locked') } }
        # Connection Identifier
        field :connection_id, T.nilable(::String), { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('connection_id') } }
        # Filing identifier.
        field :filing_id, T.nilable(::String), { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('filing_id') } }
        # City of the transaction address.
        field :city, T.nilable(::String), { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('city') } }
        # County of the transaction address.
        field :county, T.nilable(::String), { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('county') } }
        # State of the transaction address.
        field :state, T.nilable(::String), { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('state') } }
        # Country code (ISO Alpha-2).
        field :country, T.nilable(Models::Components::CountryCodeEnum), { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('country'), 'decoder': Utils.enum_from_string(Models::Components::CountryCodeEnum, true) } }
        # Postal code of the transaction.
        field :postal_code, T.nilable(::String), { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('postal_code') } }
        # Tax ID associated with the transaction
        field :tax_id, T.nilable(::String), { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('tax_id') } }
        # Destination currency code (ISO 4217, e.g., USD)
        field :destination_currency, T.nilable(Models::Components::CurrencyEnum), { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('destination_currency'), 'decoder': Utils.enum_from_string(Models::Components::CurrencyEnum, true) } }
        # Converted total amount.
        field :converted_total_amount, T.nilable(::String), { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('converted_total_amount') } }
        # Converted imported tax amount.
        field :converted_total_tax_amount_imported, T.nilable(::String), { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('converted_total_tax_amount_imported') } }
        # Converted calculated tax amount.
        field :converted_total_tax_amount_calculated, T.nilable(::String), { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('converted_total_tax_amount_calculated') } }
        # Currency conversion rate.
        field :conversion_rate, T.nilable(::String), { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('conversion_rate') } }
        # Converted taxable amount.
        field :converted_taxable_amount, T.nilable(::String), { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('converted_taxable_amount') } }
        # Converted total discount amount.
        field :converted_total_discount, T.nilable(::String), { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('converted_total_discount') } }
        # Converted subtotal amount.
        field :converted_subtotal, T.nilable(::String), { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('converted_subtotal') } }
        # Converted total tax liability amount.
        field :converted_total_tax_liability_amount, T.nilable(::String), { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('converted_total_tax_liability_amount') } }
        # Customer information associated with the transaction.
        field :customer, T.nilable(Models::Components::CustomerRead), { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('customer') } }
        # Total amount of all discounts applied to the transaction.
        field :total_discount, T.nilable(::String), { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('total_discount') } }
        # Subtotal amount before any discounts are applied.
        field :subtotal, T.nilable(::String), { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('subtotal') } }
        # Final total amount including tax liability.
        field :final_total_amount, T.nilable(::String), { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('final_total_amount') } }
        # Converted final total amount including tax liability.
        field :converted_final_total_amount, T.nilable(::String), { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('converted_final_total_amount') } }

        sig { params(organization_id: ::String, external_id: ::String, date: ::DateTime, id: ::String, addresses: T::Array[Models::Components::TransactionAddressReadOutput], transaction_items: T::Array[Models::Components::TransactionItemRead], type: Models::Components::TransactionTypeEnum, status: T.nilable(Models::Components::TransactionStatusEnum), currency: T.nilable(Models::Components::CurrencyEnum), source: T.nilable(Models::Components::SourceEnum), address_status: T.nilable(Models::Components::AddressStatus), processing_status: T.nilable(Models::Components::ProcessingStatusEnum), requires_exemption: T.nilable(Models::Components::ExemptionRequired), shop_date: T.nilable(::Date), shop_date_tz: T.nilable(::String), description: T.nilable(::String), refund_status: T.nilable(Models::Components::TransactionRefundStatus), total_amount: T.nilable(::String), customer_id: T.nilable(::String), marketplace: T.nilable(T::Boolean), exempt: T.nilable(Models::Components::TransactionExemptStatusEnum), exemptions: T.nilable(T::Array[Models::Components::Exemption]), related_to: T.nilable(::String), secondary_external_id: T.nilable(::String), secondary_source: T.nilable(::String), external_friendly_id: T.nilable(::String), total_tax_amount_imported: T.nilable(::String), tax_rate_imported: T.nilable(::String), total_tax_amount_calculated: T.nilable(::String), tax_rate_calculated: T.nilable(::String), total_tax_liability_amount: T.nilable(::String), tax_liability_source: T.nilable(Models::Components::TaxLiabilitySourceEnum), taxable_amount: T.nilable(::String), locked: T.nilable(T::Boolean), connection_id: T.nilable(::String), filing_id: T.nilable(::String), city: T.nilable(::String), county: T.nilable(::String), state: T.nilable(::String), country: T.nilable(Models::Components::CountryCodeEnum), postal_code: T.nilable(::String), tax_id: T.nilable(::String), destination_currency: T.nilable(Models::Components::CurrencyEnum), converted_total_amount: T.nilable(::String), converted_total_tax_amount_imported: T.nilable(::String), converted_total_tax_amount_calculated: T.nilable(::String), conversion_rate: T.nilable(::String), converted_taxable_amount: T.nilable(::String), converted_total_discount: T.nilable(::String), converted_subtotal: T.nilable(::String), converted_total_tax_liability_amount: T.nilable(::String), customer: T.nilable(Models::Components::CustomerRead), total_discount: T.nilable(::String), subtotal: T.nilable(::String), final_total_amount: T.nilable(::String), converted_final_total_amount: T.nilable(::String)).void }
        def initialize(organization_id:, external_id:, date:, id:, addresses:, transaction_items:, type:, status: nil, currency: nil, source: nil, address_status: nil, processing_status: nil, requires_exemption: nil, shop_date: nil, shop_date_tz: nil, description: nil, refund_status: nil, total_amount: '0.00', customer_id: nil, marketplace: nil, exempt: nil, exemptions: nil, related_to: nil, secondary_external_id: nil, secondary_source: nil, external_friendly_id: nil, total_tax_amount_imported: '0.00', tax_rate_imported: '0.00', total_tax_amount_calculated: '0.00', tax_rate_calculated: '0.00', total_tax_liability_amount: '0.00', tax_liability_source: nil, taxable_amount: '0.00', locked: false, connection_id: nil, filing_id: nil, city: nil, county: nil, state: nil, country: nil, postal_code: nil, tax_id: nil, destination_currency: nil, converted_total_amount: nil, converted_total_tax_amount_imported: nil, converted_total_tax_amount_calculated: nil, conversion_rate: nil, converted_taxable_amount: nil, converted_total_discount: nil, converted_subtotal: nil, converted_total_tax_liability_amount: nil, customer: nil, total_discount: nil, subtotal: nil, final_total_amount: nil, converted_final_total_amount: nil)
          @organization_id = organization_id
          @external_id = external_id
          @date = date
          @id = id
          @addresses = addresses
          @transaction_items = transaction_items
          @type = type
          @status = status
          @currency = currency
          @source = source
          @address_status = address_status
          @processing_status = processing_status
          @requires_exemption = requires_exemption
          @shop_date = shop_date
          @shop_date_tz = shop_date_tz
          @description = description
          @refund_status = refund_status
          @total_amount = total_amount
          @customer_id = customer_id
          @marketplace = marketplace
          @exempt = exempt
          @exemptions = exemptions
          @related_to = related_to
          @secondary_external_id = secondary_external_id
          @secondary_source = secondary_source
          @external_friendly_id = external_friendly_id
          @total_tax_amount_imported = total_tax_amount_imported
          @tax_rate_imported = tax_rate_imported
          @total_tax_amount_calculated = total_tax_amount_calculated
          @tax_rate_calculated = tax_rate_calculated
          @total_tax_liability_amount = total_tax_liability_amount
          @tax_liability_source = tax_liability_source
          @taxable_amount = taxable_amount
          @locked = locked
          @connection_id = connection_id
          @filing_id = filing_id
          @city = city
          @county = county
          @state = state
          @country = country
          @postal_code = postal_code
          @tax_id = tax_id
          @destination_currency = destination_currency
          @converted_total_amount = converted_total_amount
          @converted_total_tax_amount_imported = converted_total_tax_amount_imported
          @converted_total_tax_amount_calculated = converted_total_tax_amount_calculated
          @conversion_rate = conversion_rate
          @converted_taxable_amount = converted_taxable_amount
          @converted_total_discount = converted_total_discount
          @converted_subtotal = converted_subtotal
          @converted_total_tax_liability_amount = converted_total_tax_liability_amount
          @customer = customer
          @total_discount = total_discount
          @subtotal = subtotal
          @final_total_amount = final_total_amount
          @converted_final_total_amount = converted_final_total_amount
        end

        sig { params(other: T.untyped).returns(T::Boolean) }
        def ==(other)
          return false unless other.is_a? self.class
          T.cast(other, TransactionRead)
          return false unless @organization_id == other.organization_id
          return false unless @external_id == other.external_id
          return false unless @date == other.date
          return false unless @id == other.id
          return false unless @addresses == other.addresses
          return false unless @transaction_items == other.transaction_items
          return false unless @type == other.type
          return false unless @status == other.status
          return false unless @currency == other.currency
          return false unless @source == other.source
          return false unless @address_status == other.address_status
          return false unless @processing_status == other.processing_status
          return false unless @requires_exemption == other.requires_exemption
          return false unless @shop_date == other.shop_date
          return false unless @shop_date_tz == other.shop_date_tz
          return false unless @description == other.description
          return false unless @refund_status == other.refund_status
          return false unless @total_amount == other.total_amount
          return false unless @customer_id == other.customer_id
          return false unless @marketplace == other.marketplace
          return false unless @exempt == other.exempt
          return false unless @exemptions == other.exemptions
          return false unless @related_to == other.related_to
          return false unless @secondary_external_id == other.secondary_external_id
          return false unless @secondary_source == other.secondary_source
          return false unless @external_friendly_id == other.external_friendly_id
          return false unless @total_tax_amount_imported == other.total_tax_amount_imported
          return false unless @tax_rate_imported == other.tax_rate_imported
          return false unless @total_tax_amount_calculated == other.total_tax_amount_calculated
          return false unless @tax_rate_calculated == other.tax_rate_calculated
          return false unless @total_tax_liability_amount == other.total_tax_liability_amount
          return false unless @tax_liability_source == other.tax_liability_source
          return false unless @taxable_amount == other.taxable_amount
          return false unless @locked == other.locked
          return false unless @connection_id == other.connection_id
          return false unless @filing_id == other.filing_id
          return false unless @city == other.city
          return false unless @county == other.county
          return false unless @state == other.state
          return false unless @country == other.country
          return false unless @postal_code == other.postal_code
          return false unless @tax_id == other.tax_id
          return false unless @destination_currency == other.destination_currency
          return false unless @converted_total_amount == other.converted_total_amount
          return false unless @converted_total_tax_amount_imported == other.converted_total_tax_amount_imported
          return false unless @converted_total_tax_amount_calculated == other.converted_total_tax_amount_calculated
          return false unless @conversion_rate == other.conversion_rate
          return false unless @converted_taxable_amount == other.converted_taxable_amount
          return false unless @converted_total_discount == other.converted_total_discount
          return false unless @converted_subtotal == other.converted_subtotal
          return false unless @converted_total_tax_liability_amount == other.converted_total_tax_liability_amount
          return false unless @customer == other.customer
          return false unless @total_discount == other.total_discount
          return false unless @subtotal == other.subtotal
          return false unless @final_total_amount == other.final_total_amount
          return false unless @converted_final_total_amount == other.converted_final_total_amount
          true
        end
      end
    end
  end
end

# Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

# typed: true
# frozen_string_literal: true

require 'faraday'
require 'faraday/multipart'
require 'faraday/retry'
require 'sorbet-runtime'
require_relative 'sdk_hooks/hooks'
require_relative 'utils/retries'

module OpenApiSDK
  extend T::Sig

  SERVERS = [
    '/', 
  ].freeze
  SERVERS = T.let(SERVERS, T::Array[String])
  # Contains the list of servers available to the SDK

  class SDKConfiguration
    extend T::Sig
    include Crystalline::MetadataFields


    field :client, T.nilable(Faraday::Connection)
    field :hooks, ::OpenApiSDK::SDKHooks::Hooks
    field :retry_config, T.nilable(::OpenApiSDK::Utils::RetryConfig)
    field :timeout, T.nilable(Float)
    field :security_source, T.nilable(T.proc.returns(T.nilable(Models::Components::Security)))
    field :server_url, T.nilable(String)
    field :server_idx, T.nilable(Integer)
    field :language, String
    field :openapi_doc_version, String
    field :sdk_version, String
    field :gen_version, String
    field :user_agent, String

    sig do
      params(
        client: T.nilable(Faraday::Connection),
        hooks: ::OpenApiSDK::SDKHooks::Hooks,
        retry_config: T.nilable(::OpenApiSDK::Utils::RetryConfig),
        timeout_ms: T.nilable(Integer),
        api_key_header: T.nilable(::String),
        security_source: T.nilable(T.proc.returns(Models::Components::Security)),
        server_url: T.nilable(String),
        server_idx: T.nilable(Integer)
      ).void
    end
    def initialize(client, hooks, retry_config, timeout_ms, api_key_header, security_source, server_url, server_idx)
      @client = client
      @hooks = hooks
      @retry_config = retry_config
      @server_url = server_url
      @timeout = (timeout_ms.to_f / 1000) unless timeout_ms.nil?
      @server_idx = server_idx.nil? ? 0 : server_idx
      raise StandardError, "Invalid server index #{server_idx}" if @server_idx.negative? || @server_idx >= SERVERS.length
      if !security_source.nil?
        @security_source = security_source
      elsif !api_key_header.nil?
        @security_source = -> { Models::Components::Security.new(api_key_header: api_key_header) }
      end
      @language = 'ruby'
      @openapi_doc_version = '1.0.0'
      @sdk_version = '0.1.1'
      @gen_version = '2.654.2'
      @user_agent = 'speakeasy-sdk/ruby 0.1.1 2.654.2 1.0.0 openapi'
    end

    sig { returns([String, T::Hash[Symbol, String]]) }
    def get_server_details
      return [@server_url.delete_suffix('/'), {}] if !@server_url.nil?
      [T.must(SERVERS[@server_idx]), {}]
    end
  end
end

# Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

# typed: false
# frozen_string_literal: true

require 'sorbet-runtime'

module Crystalline

  def self.to_dict(complex)
    if complex.is_a? Array
      complex.map { |v| Crystalline.to_dict(v) }
    elsif complex.is_a? Hash
      complex.transform_values { |v| Crystalline.to_dict(v) }
    elsif complex.respond_to?(:class) && complex.class.include?(::Crystalline::MetadataFields)
      complex.to_dict
    else
      val_to_string complex, primitives: false
    end
  end

  def self.needs_string_conversion(val)
    val.is_a?(T::Enum) || val.is_a?(DateTime) || val.nil?
  end

  def self.to_json(complex)
    JSON.dump(to_dict(complex))
  end

  def self.unmarshal_json(data, type)
    if T.simplifiable? type
      type = T.simplify_type type
    end
    if type.instance_of?(Class) && type.include?(::Crystalline::MetadataFields)
      type.from_dict(data)
    elsif T.union? type
      union_types = T.get_union_types(type)
      union_types = union_types.sort_by { |klass| Crystalline.non_nilable_attr_count(klass) }

      union_types.each do |union_type|
        unmarshalled_val = Crystalline.unmarshal_json(data, union_type)
        return unmarshalled_val
      rescue TypeError
        next
      rescue NoMethodError
        next
      rescue KeyError
        next
      end
    elsif T.arr? type
      data.map { |v| Crystalline.unmarshal_json(v, T.arr_of(type)) }
    elsif T.hash? type
      data.transform_values { |v| Crystalline.unmarshal_json(v, T.hash_of(type)) }
    elsif T.nilable?(type) && data == 'null'
      nil
    else
      data
    end
  end

  def self.val_to_string(val, primitives: true)
    if val.is_a? T::Enum
      val.serialize
    elsif val.is_a? DateTime
      val.strftime('%Y-%m-%dT%H:%M:%S.%NZ')
    elsif val.nil?
      nil
    elsif primitives
      val.to_s
    else
      val
    end
  end

  def self.non_nilable_attr_count(klass)
    # somewhat sane sort ordering for Union deserialization.
    # All Crystalline objects return the number of non-nilable fields
    # All non-string primitives return 2
    # All arrays and hashes return 1
    # Strings return 0 (since any data can deserialize to a string, it should be our last attempt)
    if klass.respond_to? :fields
      return -1 * klass.fields.count do |field|
        !T.nilable? field.type
      end
    else
      if klass == String
        return 0
      elsif klass.is_a?(T::Types::TypedArray) || klass.is_a?(T::Types::TypedHash)
        return 1
      end
      return 2
    end
  end
end

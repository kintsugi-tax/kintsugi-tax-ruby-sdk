# Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

# typed: true
# frozen_string_literal: true


module KintsugiSDK
  module Models
    module Shared
    

      class TransactionPublicRequest
        extend T::Sig
        include Crystalline::MetadataFields

        # Unique identifier of the organization.
        field :organization_id, ::String, { 'format_json': { 'letter_case': ::KintsugiSDK::Utils.field_name('organization_id'), required: true } }
        # External identifier of the transaction.
        field :external_id, ::String, { 'format_json': { 'letter_case': ::KintsugiSDK::Utils.field_name('external_id'), required: true } }
        # Transaction date and time
        field :date, ::DateTime, { 'format_json': { 'letter_case': ::KintsugiSDK::Utils.field_name('date'), required: true, 'decoder': Utils.datetime_from_iso_format(false) } }

        field :addresses, Crystalline::Array.new(Models::Shared::TransactionAddressPublic), { 'format_json': { 'letter_case': ::KintsugiSDK::Utils.field_name('addresses'), required: true } }

        field :transaction_items, Crystalline::Array.new(Models::Shared::TransactionItemBuilder), { 'format_json': { 'letter_case': ::KintsugiSDK::Utils.field_name('transaction_items'), required: true } }

        field :customer, Models::Shared::CustomerBaseBase, { 'format_json': { 'letter_case': ::KintsugiSDK::Utils.field_name('customer'), required: true } }

        field :type, Models::Shared::TransactionTypeEnum, { 'format_json': { 'letter_case': ::KintsugiSDK::Utils.field_name('type'), required: true, 'decoder': Utils.enum_from_string(Models::Shared::TransactionTypeEnum, false) } }

        field :requires_exemption, Crystalline::Nilable.new(Models::Shared::ExemptionRequired), { 'format_json': { 'letter_case': ::KintsugiSDK::Utils.field_name('requires_exemption') } }
        # Transaction date in the shop's local timezone
        field :shop_date, Crystalline::Nilable.new(::String), { 'format_json': { 'letter_case': ::KintsugiSDK::Utils.field_name('shop_date') } }
        # Timezone of the shop
        field :shop_date_tz, Crystalline::Nilable.new(::String), { 'format_json': { 'letter_case': ::KintsugiSDK::Utils.field_name('shop_date_tz') } }

        field :status, Crystalline::Nilable.new(Models::Shared::TransactionStatusEnum), { 'format_json': { 'letter_case': ::KintsugiSDK::Utils.field_name('status'), 'decoder': Utils.enum_from_string(Models::Shared::TransactionStatusEnum, true) } }
        # Description of the transaction.
        field :description, Crystalline::Nilable.new(::String), { 'format_json': { 'letter_case': ::KintsugiSDK::Utils.field_name('description') } }
        # Shopify has 2 order statuses for refund case: refunded and partially_refunded
        # If the given order has different status from these 2, we will set the
        # transaction's refund_status to PARTIALLY_REFUNDED by default.
        field :refund_status, Crystalline::Nilable.new(Models::Shared::TransactionRefundStatus), { 'format_json': { 'letter_case': ::KintsugiSDK::Utils.field_name('refund_status'), 'decoder': Utils.enum_from_string(Models::Shared::TransactionRefundStatus, true) } }
        # Unique identifier of the customer.
        field :customer_id, Crystalline::Nilable.new(::String), { 'format_json': { 'letter_case': ::KintsugiSDK::Utils.field_name('customer_id') } }
        # Based on transaction item exempt status.
        # NOT EXEMPT: None of the items are NOT EXEMPT
        # PARTIALLY EXEMPT: At least some of the items are NOT EXEMPT
        # FULLY_EXEMPT: All items sold in the transaction are EXEMPT
        field :exempt, Crystalline::Nilable.new(Models::Shared::TransactionExemptStatusEnum), { 'format_json': { 'letter_case': ::KintsugiSDK::Utils.field_name('exempt'), 'decoder': Utils.enum_from_string(Models::Shared::TransactionExemptStatusEnum, true) } }
        # List of exemptions applied (if any).
        field :exemptions, Crystalline::Nilable.new(Crystalline::Array.new(Models::Shared::Exemption)), { 'format_json': { 'letter_case': ::KintsugiSDK::Utils.field_name('exemptions') } }
        # Related transaction identifier.
        field :related_to, Crystalline::Nilable.new(::String), { 'format_json': { 'letter_case': ::KintsugiSDK::Utils.field_name('related_to') } }
        # Secondary External Identifier.
        field :secondary_external_id, Crystalline::Nilable.new(::String), { 'format_json': { 'letter_case': ::KintsugiSDK::Utils.field_name('secondary_external_id') } }
        # Secondary source information
        field :secondary_source, Crystalline::Nilable.new(::String), { 'format_json': { 'letter_case': ::KintsugiSDK::Utils.field_name('secondary_source') } }
        # Friendly identifier of the original item.
        field :external_friendly_id, Crystalline::Nilable.new(::String), { 'format_json': { 'letter_case': ::KintsugiSDK::Utils.field_name('external_friendly_id') } }

        field :tax_liability_source, Crystalline::Nilable.new(Models::Shared::TaxLiabilitySourceEnum), { 'format_json': { 'letter_case': ::KintsugiSDK::Utils.field_name('tax_liability_source'), 'decoder': Utils.enum_from_string(Models::Shared::TaxLiabilitySourceEnum, true) } }

        field :currency, Crystalline::Nilable.new(Models::Shared::CurrencyEnum), { 'format_json': { 'letter_case': ::KintsugiSDK::Utils.field_name('currency'), 'decoder': Utils.enum_from_string(Models::Shared::CurrencyEnum, true) } }

        field :source, Crystalline::Nilable.new(Models::Shared::SourceEnum), { 'format_json': { 'letter_case': ::KintsugiSDK::Utils.field_name('source'), 'decoder': Utils.enum_from_string(Models::Shared::SourceEnum, true) } }
        # Connection Identifier
        field :connection_id, Crystalline::Nilable.new(::String), { 'format_json': { 'letter_case': ::KintsugiSDK::Utils.field_name('connection_id') } }
        # Filing identifier.
        field :filing_id, Crystalline::Nilable.new(::String), { 'format_json': { 'letter_case': ::KintsugiSDK::Utils.field_name('filing_id') } }
        # City of the transaction address.
        field :city, Crystalline::Nilable.new(::String), { 'format_json': { 'letter_case': ::KintsugiSDK::Utils.field_name('city') } }
        # County of the transaction address.
        field :county, Crystalline::Nilable.new(::String), { 'format_json': { 'letter_case': ::KintsugiSDK::Utils.field_name('county') } }
        # State of the transaction address.
        field :state, Crystalline::Nilable.new(::String), { 'format_json': { 'letter_case': ::KintsugiSDK::Utils.field_name('state') } }

        field :country, Crystalline::Nilable.new(Models::Shared::CountryCodeEnum), { 'format_json': { 'letter_case': ::KintsugiSDK::Utils.field_name('country'), 'decoder': Utils.enum_from_string(Models::Shared::CountryCodeEnum, true) } }
        # Postal code of the transaction.
        field :postal_code, Crystalline::Nilable.new(::String), { 'format_json': { 'letter_case': ::KintsugiSDK::Utils.field_name('postal_code') } }
        # Tax ID associated with the transaction
        field :tax_id, Crystalline::Nilable.new(::String), { 'format_json': { 'letter_case': ::KintsugiSDK::Utils.field_name('tax_id') } }
        # Total amount of the transaction.
        field :total_amount, Crystalline::Nilable.new(::Float), { 'format_json': { 'letter_case': ::KintsugiSDK::Utils.field_name('total_amount') } }
        # Indicates if transaction is marketplace-based.
        field :marketplace, Crystalline::Nilable.new(Crystalline::Boolean.new), { 'format_json': { 'letter_case': ::KintsugiSDK::Utils.field_name('marketplace') } }
        # Imported tax amount.
        field :total_tax_amount_imported, Crystalline::Nilable.new(::Float), { 'format_json': { 'letter_case': ::KintsugiSDK::Utils.field_name('total_tax_amount_imported') } }
        # Imported tax rate.
        field :tax_rate_imported, Crystalline::Nilable.new(::Float), { 'format_json': { 'letter_case': ::KintsugiSDK::Utils.field_name('tax_rate_imported') } }
        # Calculated tax amount.
        field :total_tax_amount_calculated, Crystalline::Nilable.new(::Float), { 'format_json': { 'letter_case': ::KintsugiSDK::Utils.field_name('total_tax_amount_calculated') } }
        # Calculated tax rate.
        field :tax_rate_calculated, Crystalline::Nilable.new(::Float), { 'format_json': { 'letter_case': ::KintsugiSDK::Utils.field_name('tax_rate_calculated') } }
        # Total tax liability amount.
        field :total_tax_liability_amount, Crystalline::Nilable.new(::Float), { 'format_json': { 'letter_case': ::KintsugiSDK::Utils.field_name('total_tax_liability_amount') } }
        # Taxable amount.
        field :taxable_amount, Crystalline::Nilable.new(::Float), { 'format_json': { 'letter_case': ::KintsugiSDK::Utils.field_name('taxable_amount') } }
        # Transaction lock status.
        field :locked, Crystalline::Nilable.new(Crystalline::Boolean.new), { 'format_json': { 'letter_case': ::KintsugiSDK::Utils.field_name('locked') } }

        sig { params(organization_id: ::String, external_id: ::String, date: ::DateTime, addresses: T::Array[Models::Shared::TransactionAddressPublic], transaction_items: T::Array[Models::Shared::TransactionItemBuilder], customer: Models::Shared::CustomerBaseBase, type: Models::Shared::TransactionTypeEnum, requires_exemption: T.nilable(Models::Shared::ExemptionRequired), shop_date: T.nilable(::String), shop_date_tz: T.nilable(::String), status: T.nilable(Models::Shared::TransactionStatusEnum), description: T.nilable(::String), refund_status: T.nilable(Models::Shared::TransactionRefundStatus), customer_id: T.nilable(::String), exempt: T.nilable(Models::Shared::TransactionExemptStatusEnum), exemptions: T.nilable(T::Array[Models::Shared::Exemption]), related_to: T.nilable(::String), secondary_external_id: T.nilable(::String), secondary_source: T.nilable(::String), external_friendly_id: T.nilable(::String), tax_liability_source: T.nilable(Models::Shared::TaxLiabilitySourceEnum), currency: T.nilable(Models::Shared::CurrencyEnum), source: T.nilable(Models::Shared::SourceEnum), connection_id: T.nilable(::String), filing_id: T.nilable(::String), city: T.nilable(::String), county: T.nilable(::String), state: T.nilable(::String), country: T.nilable(Models::Shared::CountryCodeEnum), postal_code: T.nilable(::String), tax_id: T.nilable(::String), total_amount: T.nilable(::Float), marketplace: T.nilable(T::Boolean), total_tax_amount_imported: T.nilable(::Float), tax_rate_imported: T.nilable(::Float), total_tax_amount_calculated: T.nilable(::Float), tax_rate_calculated: T.nilable(::Float), total_tax_liability_amount: T.nilable(::Float), taxable_amount: T.nilable(::Float), locked: T.nilable(T::Boolean)).void }
        def initialize(organization_id:, external_id:, date:, addresses:, transaction_items:, customer:, type:, requires_exemption: nil, shop_date: nil, shop_date_tz: nil, status: nil, description: nil, refund_status: nil, customer_id: nil, exempt: nil, exemptions: nil, related_to: nil, secondary_external_id: nil, secondary_source: nil, external_friendly_id: nil, tax_liability_source: nil, currency: nil, source: nil, connection_id: nil, filing_id: nil, city: nil, county: nil, state: nil, country: nil, postal_code: nil, tax_id: nil, total_amount: 0.00, marketplace: false, total_tax_amount_imported: 0.00, tax_rate_imported: 0.00, total_tax_amount_calculated: 0.00, tax_rate_calculated: 0.00, total_tax_liability_amount: 0.00, taxable_amount: 0.00, locked: false)
          @organization_id = organization_id
          @external_id = external_id
          @date = date
          @addresses = addresses
          @transaction_items = transaction_items
          @customer = customer
          @type = type
          @requires_exemption = requires_exemption
          @shop_date = shop_date
          @shop_date_tz = shop_date_tz
          @status = status
          @description = description
          @refund_status = refund_status
          @customer_id = customer_id
          @exempt = exempt
          @exemptions = exemptions
          @related_to = related_to
          @secondary_external_id = secondary_external_id
          @secondary_source = secondary_source
          @external_friendly_id = external_friendly_id
          @tax_liability_source = tax_liability_source
          @currency = currency
          @source = source
          @connection_id = connection_id
          @filing_id = filing_id
          @city = city
          @county = county
          @state = state
          @country = country
          @postal_code = postal_code
          @tax_id = tax_id
          @total_amount = total_amount
          @marketplace = marketplace
          @total_tax_amount_imported = total_tax_amount_imported
          @tax_rate_imported = tax_rate_imported
          @total_tax_amount_calculated = total_tax_amount_calculated
          @tax_rate_calculated = tax_rate_calculated
          @total_tax_liability_amount = total_tax_liability_amount
          @taxable_amount = taxable_amount
          @locked = locked
        end

        sig { params(other: T.untyped).returns(T::Boolean) }
        def ==(other)
          return false unless other.is_a? self.class
          return false unless @organization_id == other.organization_id
          return false unless @external_id == other.external_id
          return false unless @date == other.date
          return false unless @addresses == other.addresses
          return false unless @transaction_items == other.transaction_items
          return false unless @customer == other.customer
          return false unless @type == other.type
          return false unless @requires_exemption == other.requires_exemption
          return false unless @shop_date == other.shop_date
          return false unless @shop_date_tz == other.shop_date_tz
          return false unless @status == other.status
          return false unless @description == other.description
          return false unless @refund_status == other.refund_status
          return false unless @customer_id == other.customer_id
          return false unless @exempt == other.exempt
          return false unless @exemptions == other.exemptions
          return false unless @related_to == other.related_to
          return false unless @secondary_external_id == other.secondary_external_id
          return false unless @secondary_source == other.secondary_source
          return false unless @external_friendly_id == other.external_friendly_id
          return false unless @tax_liability_source == other.tax_liability_source
          return false unless @currency == other.currency
          return false unless @source == other.source
          return false unless @connection_id == other.connection_id
          return false unless @filing_id == other.filing_id
          return false unless @city == other.city
          return false unless @county == other.county
          return false unless @state == other.state
          return false unless @country == other.country
          return false unless @postal_code == other.postal_code
          return false unless @tax_id == other.tax_id
          return false unless @total_amount == other.total_amount
          return false unless @marketplace == other.marketplace
          return false unless @total_tax_amount_imported == other.total_tax_amount_imported
          return false unless @tax_rate_imported == other.tax_rate_imported
          return false unless @total_tax_amount_calculated == other.total_tax_amount_calculated
          return false unless @tax_rate_calculated == other.tax_rate_calculated
          return false unless @total_tax_liability_amount == other.total_tax_liability_amount
          return false unless @taxable_amount == other.taxable_amount
          return false unless @locked == other.locked
          true
        end
      end
    end
  end
end

# Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

# typed: true
# frozen_string_literal: true


module KintsugiSDK
  module Models
    module Shared
    

      class ProductRead
        extend T::Sig
        include Crystalline::MetadataFields


        field :id, ::String, { 'format_json': { 'letter_case': ::KintsugiSDK::Utils.field_name('id'), required: true } }

        field :external_id, ::String, { 'format_json': { 'letter_case': ::KintsugiSDK::Utils.field_name('external_id'), required: true } }

        field :sku, Crystalline::Array.new(::String), { 'format_json': { 'letter_case': ::KintsugiSDK::Utils.field_name('sku'), required: true } }

        field :code, Models::Shared::ProductCodeEnum, { 'format_json': { 'letter_case': ::KintsugiSDK::Utils.field_name('code'), required: true, 'decoder': Utils.enum_from_string(Models::Shared::ProductCodeEnum, false) } }

        field :name, ::String, { 'format_json': { 'letter_case': ::KintsugiSDK::Utils.field_name('name'), required: true } }

        field :description, ::String, { 'format_json': { 'letter_case': ::KintsugiSDK::Utils.field_name('description'), required: true } }

        field :status, Models::Shared::ProductStatusEnum, { 'format_json': { 'letter_case': ::KintsugiSDK::Utils.field_name('status'), required: true, 'decoder': Utils.enum_from_string(Models::Shared::ProductStatusEnum, false) } }

        field :product_category, Models::Shared::ProductCategoryEnum, { 'format_json': { 'letter_case': ::KintsugiSDK::Utils.field_name('product_category'), required: true, 'decoder': Utils.enum_from_string(Models::Shared::ProductCategoryEnum, false) } }

        field :product_subcategory, Models::Shared::ProductSubCategoryEnum, { 'format_json': { 'letter_case': ::KintsugiSDK::Utils.field_name('product_subcategory'), required: true, 'decoder': Utils.enum_from_string(Models::Shared::ProductSubCategoryEnum, false) } }

        field :tax_exempt, Crystalline::Boolean.new, { 'format_json': { 'letter_case': ::KintsugiSDK::Utils.field_name('tax_exempt'), required: true } }

        field :source, Models::Shared::SourceEnum, { 'format_json': { 'letter_case': ::KintsugiSDK::Utils.field_name('source'), required: true, 'decoder': Utils.enum_from_string(Models::Shared::SourceEnum, false) } }

        field :connection_id, ::String, { 'format_json': { 'letter_case': ::KintsugiSDK::Utils.field_name('connection_id'), required: true } }

        field :classification_failed, Crystalline::Boolean.new, { 'format_json': { 'letter_case': ::KintsugiSDK::Utils.field_name('classification_failed'), required: true } }

        sig { params(id: ::String, external_id: ::String, sku: T::Array[::String], code: Models::Shared::ProductCodeEnum, name: ::String, description: ::String, status: Models::Shared::ProductStatusEnum, product_category: Models::Shared::ProductCategoryEnum, product_subcategory: Models::Shared::ProductSubCategoryEnum, tax_exempt: T::Boolean, source: Models::Shared::SourceEnum, connection_id: ::String, classification_failed: T::Boolean).void }
        def initialize(id:, external_id:, sku:, code:, name:, description:, status:, product_category:, product_subcategory:, tax_exempt:, source:, connection_id:, classification_failed:)
          @id = id
          @external_id = external_id
          @sku = sku
          @code = code
          @name = name
          @description = description
          @status = status
          @product_category = product_category
          @product_subcategory = product_subcategory
          @tax_exempt = tax_exempt
          @source = source
          @connection_id = connection_id
          @classification_failed = classification_failed
        end

        sig { params(other: T.untyped).returns(T::Boolean) }
        def ==(other)
          return false unless other.is_a? self.class
          return false unless @id == other.id
          return false unless @external_id == other.external_id
          return false unless @sku == other.sku
          return false unless @code == other.code
          return false unless @name == other.name
          return false unless @description == other.description
          return false unless @status == other.status
          return false unless @product_category == other.product_category
          return false unless @product_subcategory == other.product_subcategory
          return false unless @tax_exempt == other.tax_exempt
          return false unless @source == other.source
          return false unless @connection_id == other.connection_id
          return false unless @classification_failed == other.classification_failed
          true
        end
      end
    end
  end
end

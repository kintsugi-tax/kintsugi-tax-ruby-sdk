# Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

# typed: true
# frozen_string_literal: true


module KintsugiSDK
  module Models
    module Shared
    

      class PageNexusResponse
        extend T::Sig
        include Crystalline::MetadataFields


        field :items, Crystalline::Array.new(Models::Shared::NexusResponse), { 'format_json': { 'letter_case': ::KintsugiSDK::Utils.field_name('items'), required: true } }

        field :total, ::Integer, { 'format_json': { 'letter_case': ::KintsugiSDK::Utils.field_name('total'), required: true } }

        field :page, ::Integer, { 'format_json': { 'letter_case': ::KintsugiSDK::Utils.field_name('page'), required: true } }

        field :size, ::Integer, { 'format_json': { 'letter_case': ::KintsugiSDK::Utils.field_name('size'), required: true } }

        field :pages, Crystalline::Nilable.new(::Integer), { 'format_json': { 'letter_case': ::KintsugiSDK::Utils.field_name('pages') } }

        sig { params(items: T::Array[Models::Shared::NexusResponse], total: ::Integer, page: ::Integer, size: ::Integer, pages: T.nilable(::Integer)).void }
        def initialize(items:, total:, page:, size:, pages: nil)
          @items = items
          @total = total
          @page = page
          @size = size
          @pages = pages
        end

        sig { params(other: T.untyped).returns(T::Boolean) }
        def ==(other)
          return false unless other.is_a? self.class
          return false unless @items == other.items
          return false unless @total == other.total
          return false unless @page == other.page
          return false unless @size == other.size
          return false unless @pages == other.pages
          true
        end
      end
    end
  end
end

# Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

# typed: true
# frozen_string_literal: true


module KintsugiSDK
  module Models
    module Shared
    

      class ProductCreateManual
        extend T::Sig
        include Crystalline::MetadataFields

        # A unique external identifier for the product.
        field :external_id, ::String, { 'format_json': { 'letter_case': ::KintsugiSDK::Utils.field_name('external_id'), required: true } }
        # The name of the product.
        field :name, ::String, { 'format_json': { 'letter_case': ::KintsugiSDK::Utils.field_name('name'), required: true } }

        field :product_category, Models::Shared::ProductCategoryEnum, { 'format_json': { 'letter_case': ::KintsugiSDK::Utils.field_name('product_category'), required: true, 'decoder': Utils.enum_from_string(Models::Shared::ProductCategoryEnum, false) } }

        field :product_subcategory, Models::Shared::ProductSubCategoryEnum, { 'format_json': { 'letter_case': ::KintsugiSDK::Utils.field_name('product_subcategory'), required: true, 'decoder': Utils.enum_from_string(Models::Shared::ProductSubCategoryEnum, false) } }
        # Specifies whether the product is tax-exempt.
        field :tax_exempt, Crystalline::Boolean.new, { 'format_json': { 'letter_case': ::KintsugiSDK::Utils.field_name('tax_exempt'), required: true } }
        # A description of the product.
        field :description, Crystalline::Nilable.new(::String), { 'format_json': { 'letter_case': ::KintsugiSDK::Utils.field_name('description') } }

        field :status, Crystalline::Nilable.new(Models::Shared::ProductStatusEnum), { 'format_json': { 'letter_case': ::KintsugiSDK::Utils.field_name('status'), 'decoder': Utils.enum_from_string(Models::Shared::ProductStatusEnum, true) } }

        field :source, Crystalline::Nilable.new(Models::Shared::SourceEnum), { 'format_json': { 'letter_case': ::KintsugiSDK::Utils.field_name('source'), 'decoder': Utils.enum_from_string(Models::Shared::SourceEnum, true) } }

        sig { params(external_id: ::String, name: ::String, product_category: Models::Shared::ProductCategoryEnum, product_subcategory: Models::Shared::ProductSubCategoryEnum, tax_exempt: T::Boolean, description: T.nilable(::String), status: T.nilable(Models::Shared::ProductStatusEnum), source: T.nilable(Models::Shared::SourceEnum)).void }
        def initialize(external_id:, name:, product_category:, product_subcategory:, tax_exempt:, description: nil, status: nil, source: nil)
          @external_id = external_id
          @name = name
          @product_category = product_category
          @product_subcategory = product_subcategory
          @tax_exempt = tax_exempt
          @description = description
          @status = status
          @source = source
        end

        sig { params(other: T.untyped).returns(T::Boolean) }
        def ==(other)
          return false unless other.is_a? self.class
          return false unless @external_id == other.external_id
          return false unless @name == other.name
          return false unless @product_category == other.product_category
          return false unless @product_subcategory == other.product_subcategory
          return false unless @tax_exempt == other.tax_exempt
          return false unless @description == other.description
          return false unless @status == other.status
          return false unless @source == other.source
          true
        end
      end
    end
  end
end

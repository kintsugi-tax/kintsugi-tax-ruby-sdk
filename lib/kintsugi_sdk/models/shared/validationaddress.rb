# Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

# typed: true
# frozen_string_literal: true


module KintsugiSDK
  module Models
    module Shared
    

      class ValidationAddress
        extend T::Sig
        include Crystalline::MetadataFields

        # Primary address line, such as street name and number
        field :line1, Crystalline::Nilable.new(::String), { 'format_json': { 'letter_case': ::KintsugiSDK::Utils.field_name('line1') } }
        # Additional address details, such as an apartment or suite number
        field :line2, Crystalline::Nilable.new(::String), { 'format_json': { 'letter_case': ::KintsugiSDK::Utils.field_name('line2') } }
        # Additional address details for complex addresses
        field :line3, Crystalline::Nilable.new(::String), { 'format_json': { 'letter_case': ::KintsugiSDK::Utils.field_name('line3') } }
        # The city or town name for the address
        field :city, Crystalline::Nilable.new(::String), { 'format_json': { 'letter_case': ::KintsugiSDK::Utils.field_name('city') } }
        # State, province, or region of the address
        field :state, Crystalline::Nilable.new(::String), { 'format_json': { 'letter_case': ::KintsugiSDK::Utils.field_name('state') } }
        # Unique identifier for the request, if applicable
        field :id, Crystalline::Nilable.new(::Integer), { 'format_json': { 'letter_case': ::KintsugiSDK::Utils.field_name('id') } }
        # County or district name for the address
        field :county, Crystalline::Nilable.new(::String), { 'format_json': { 'letter_case': ::KintsugiSDK::Utils.field_name('county') } }
        # A complete address string that can be used as an alternative to providing individual fields.
        field :full_address, Crystalline::Nilable.new(::String), { 'format_json': { 'letter_case': ::KintsugiSDK::Utils.field_name('full_address') } }
        # Country code in ISO 3166-1 alpha-2 format (e.g., 'US' for the United States).
        #         Defaults to 'US'.
        #         should not be empty. Not validating here as the validation
        #         structure can be different for different providers
        field :country, Crystalline::Nilable.new(::String), { 'format_json': { 'letter_case': ::KintsugiSDK::Utils.field_name('country') } }
        # ZIP or postal code for the address. Can be empty for some locales.
        #         Not validating here as the validation structure can be different for different providers
        field :postal_code, Crystalline::Nilable.new(::String), { 'format_json': { 'letter_case': ::KintsugiSDK::Utils.field_name('postalCode') } }

        sig { params(line1: T.nilable(::String), line2: T.nilable(::String), line3: T.nilable(::String), city: T.nilable(::String), state: T.nilable(::String), id: T.nilable(::Integer), county: T.nilable(::String), full_address: T.nilable(::String), country: T.nilable(::String), postal_code: T.nilable(::String)).void }
        def initialize(line1: nil, line2: nil, line3: nil, city: nil, state: nil, id: nil, county: nil, full_address: nil, country: 'US', postal_code: '')
          @line1 = line1
          @line2 = line2
          @line3 = line3
          @city = city
          @state = state
          @id = id
          @county = county
          @full_address = full_address
          @country = country
          @postal_code = postal_code
        end

        sig { params(other: T.untyped).returns(T::Boolean) }
        def ==(other)
          return false unless other.is_a? self.class
          return false unless @line1 == other.line1
          return false unless @line2 == other.line2
          return false unless @line3 == other.line3
          return false unless @city == other.city
          return false unless @state == other.state
          return false unless @id == other.id
          return false unless @county == other.county
          return false unless @full_address == other.full_address
          return false unless @country == other.country
          return false unless @postal_code == other.postal_code
          true
        end
      end
    end
  end
end

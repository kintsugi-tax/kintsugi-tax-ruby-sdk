# Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

# typed: true
# frozen_string_literal: true


module KintsugiSDK
  module Models
    module Shared
    

      class TransactionItemEstimateResponse
        extend T::Sig
        include Crystalline::MetadataFields

        # The date of the transaction item.
        field :date, ::DateTime, { 'format_json': { 'letter_case': ::KintsugiSDK::Utils.field_name('date'), required: true, 'decoder': Utils.datetime_from_iso_format(false) } }
        # The total amount of the item.
        field :amount, ::String, { 'format_json': { 'letter_case': ::KintsugiSDK::Utils.field_name('amount'), required: true } }
        # A unique identifier for the transaction item.
        field :external_id, Crystalline::Nilable.new(::String), { 'format_json': { 'letter_case': ::KintsugiSDK::Utils.field_name('external_id') } }
        # A description of the item.
        field :description, Crystalline::Nilable.new(::String), { 'format_json': { 'letter_case': ::KintsugiSDK::Utils.field_name('description') } }
        # External product identifier. If not found and product_subcategory
        #         and product_category are not provided, an error occurs.
        field :external_product_id, Crystalline::Nilable.new(::String), { 'format_json': { 'letter_case': ::KintsugiSDK::Utils.field_name('external_product_id') } }
        # Name of the product. Used if creating a new product.
        field :product_name, Crystalline::Nilable.new(::String), { 'format_json': { 'letter_case': ::KintsugiSDK::Utils.field_name('product_name') } }
        # Description of the product. Used if creating a new product.
        field :product_description, Crystalline::Nilable.new(::String), { 'format_json': { 'letter_case': ::KintsugiSDK::Utils.field_name('product_description') } }

        field :product_source, Crystalline::Nilable.new(Models::Shared::SourceEnum), { 'format_json': { 'letter_case': ::KintsugiSDK::Utils.field_name('product_source'), 'decoder': Utils.enum_from_string(Models::Shared::SourceEnum, true) } }

        field :product_subcategory, Crystalline::Nilable.new(Models::Shared::ProductSubCategoryEnum), { 'format_json': { 'letter_case': ::KintsugiSDK::Utils.field_name('product_subcategory'), 'decoder': Utils.enum_from_string(Models::Shared::ProductSubCategoryEnum, true) } }

        field :product_category, Crystalline::Nilable.new(Models::Shared::ProductCategoryEnum), { 'format_json': { 'letter_case': ::KintsugiSDK::Utils.field_name('product_category'), 'decoder': Utils.enum_from_string(Models::Shared::ProductCategoryEnum, true) } }
        # This enum is used to determine if a transaction is exempt from tax.
        field :exempt_reason, Crystalline::Nilable.new(Models::Shared::TaxExemptionEnum), { 'format_json': { 'letter_case': ::KintsugiSDK::Utils.field_name('exempt_reason'), 'decoder': Utils.enum_from_string(Models::Shared::TaxExemptionEnum, true) } }
        # List of tax items applied to the transaction item.
        field :tax_items, Crystalline::Nilable.new(Crystalline::Array.new(Models::Shared::TaxItemEstimate)), { 'format_json': { 'letter_case': ::KintsugiSDK::Utils.field_name('tax_items') } }
        # Defaults to 1.0. The quantity of the item.
        field :quantity, Crystalline::Nilable.new(::String), { 'format_json': { 'letter_case': ::KintsugiSDK::Utils.field_name('quantity') } }
        # Indicates whether the transaction item is exempt from tax.
        field :exempt, Crystalline::Nilable.new(Crystalline::Boolean.new), { 'format_json': { 'letter_case': ::KintsugiSDK::Utils.field_name('exempt') } }
        # The total tax amount for the transaction item.
        field :tax_amount, Crystalline::Nilable.new(::String), { 'format_json': { 'letter_case': ::KintsugiSDK::Utils.field_name('tax_amount') } }
        # The taxable amount for the transaction item.
        field :taxable_amount, Crystalline::Nilable.new(::String), { 'format_json': { 'letter_case': ::KintsugiSDK::Utils.field_name('taxable_amount') } }
        # The tax rate applied to the transaction item.
        field :tax_rate, Crystalline::Nilable.new(::String), { 'format_json': { 'letter_case': ::KintsugiSDK::Utils.field_name('tax_rate') } }

        sig { params(date: ::DateTime, amount: ::String, external_id: T.nilable(::String), description: T.nilable(::String), external_product_id: T.nilable(::String), product_name: T.nilable(::String), product_description: T.nilable(::String), product_source: T.nilable(Models::Shared::SourceEnum), product_subcategory: T.nilable(Models::Shared::ProductSubCategoryEnum), product_category: T.nilable(Models::Shared::ProductCategoryEnum), exempt_reason: T.nilable(Models::Shared::TaxExemptionEnum), tax_items: T.nilable(T::Array[Models::Shared::TaxItemEstimate]), quantity: T.nilable(::String), exempt: T.nilable(T::Boolean), tax_amount: T.nilable(::String), taxable_amount: T.nilable(::String), tax_rate: T.nilable(::String)).void }
        def initialize(date:, amount:, external_id: nil, description: nil, external_product_id: nil, product_name: nil, product_description: nil, product_source: nil, product_subcategory: nil, product_category: nil, exempt_reason: nil, tax_items: nil, quantity: '1.0', exempt: false, tax_amount: '0.00', taxable_amount: '0.00', tax_rate: '0.00')
          @date = date
          @amount = amount
          @external_id = external_id
          @description = description
          @external_product_id = external_product_id
          @product_name = product_name
          @product_description = product_description
          @product_source = product_source
          @product_subcategory = product_subcategory
          @product_category = product_category
          @exempt_reason = exempt_reason
          @tax_items = tax_items
          @quantity = quantity
          @exempt = exempt
          @tax_amount = tax_amount
          @taxable_amount = taxable_amount
          @tax_rate = tax_rate
        end

        sig { params(other: T.untyped).returns(T::Boolean) }
        def ==(other)
          return false unless other.is_a? self.class
          return false unless @date == other.date
          return false unless @amount == other.amount
          return false unless @external_id == other.external_id
          return false unless @description == other.description
          return false unless @external_product_id == other.external_product_id
          return false unless @product_name == other.product_name
          return false unless @product_description == other.product_description
          return false unless @product_source == other.product_source
          return false unless @product_subcategory == other.product_subcategory
          return false unless @product_category == other.product_category
          return false unless @exempt_reason == other.exempt_reason
          return false unless @tax_items == other.tax_items
          return false unless @quantity == other.quantity
          return false unless @exempt == other.exempt
          return false unless @tax_amount == other.tax_amount
          return false unless @taxable_amount == other.taxable_amount
          return false unless @tax_rate == other.tax_rate
          true
        end
      end
    end
  end
end

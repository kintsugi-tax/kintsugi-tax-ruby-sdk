# Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

# typed: true
# frozen_string_literal: true


module KintsugiSDK
  module Models
    module Shared
    

      class CustomerBasePublic
        extend T::Sig
        include Crystalline::MetadataFields

        # Phone number associated with the address.
        field :phone, Crystalline::Nilable.new(::String), { 'format_json': { 'letter_case': ::KintsugiSDK::Utils.field_name('phone') } }
        # Primary street address.
        field :street_1, Crystalline::Nilable.new(::String), { 'format_json': { 'letter_case': ::KintsugiSDK::Utils.field_name('street_1') } }
        # Additional street address details, such as an apartment or suite number.
        field :street_2, Crystalline::Nilable.new(::String), { 'format_json': { 'letter_case': ::KintsugiSDK::Utils.field_name('street_2') } }
        # City where the customer resides.
        field :city, Crystalline::Nilable.new(::String), { 'format_json': { 'letter_case': ::KintsugiSDK::Utils.field_name('city') } }
        # County or district of the customer.
        field :county, Crystalline::Nilable.new(::String), { 'format_json': { 'letter_case': ::KintsugiSDK::Utils.field_name('county') } }
        # State or province of the customer.
        field :state, Crystalline::Nilable.new(::String), { 'format_json': { 'letter_case': ::KintsugiSDK::Utils.field_name('state') } }
        # ZIP or Postal code of the customer.
        field :postal_code, Crystalline::Nilable.new(::String), { 'format_json': { 'letter_case': ::KintsugiSDK::Utils.field_name('postal_code') } }

        field :country, Crystalline::Nilable.new(Models::Shared::CountryCodeEnum), { 'format_json': { 'letter_case': ::KintsugiSDK::Utils.field_name('country'), 'decoder': Utils.enum_from_string(Models::Shared::CountryCodeEnum, true) } }
        # Complete address string of the customer, which can be used as an alternative to individual fields.
        field :full_address, Crystalline::Nilable.new(::String), { 'format_json': { 'letter_case': ::KintsugiSDK::Utils.field_name('full_address') } }
        # Name of the customer.
        field :name, Crystalline::Nilable.new(::String), { 'format_json': { 'letter_case': ::KintsugiSDK::Utils.field_name('name') } }
        # A unique identifier for the customer.
        field :external_id, Crystalline::Nilable.new(::String), { 'format_json': { 'letter_case': ::KintsugiSDK::Utils.field_name('external_id') } }

        field :status, Crystalline::Nilable.new(Models::Shared::StatusEnum), { 'format_json': { 'letter_case': ::KintsugiSDK::Utils.field_name('status'), 'decoder': Utils.enum_from_string(Models::Shared::StatusEnum, true) } }
        # Email address of the customer.
        field :email, Crystalline::Nilable.new(::String), { 'format_json': { 'letter_case': ::KintsugiSDK::Utils.field_name('email') } }

        field :address_status, Crystalline::Nilable.new(Models::Shared::AddressStatus), { 'format_json': { 'letter_case': ::KintsugiSDK::Utils.field_name('address_status'), 'decoder': Utils.enum_from_string(Models::Shared::AddressStatus, true) } }

        field :source, Crystalline::Nilable.new(Models::Shared::SourceEnum), { 'format_json': { 'letter_case': ::KintsugiSDK::Utils.field_name('source'), 'decoder': Utils.enum_from_string(Models::Shared::SourceEnum, true) } }

        field :registration_number, Crystalline::Nilable.new(::String), { 'format_json': { 'letter_case': ::KintsugiSDK::Utils.field_name('registration_number') } }
        # Unique identifier of the connection related to the customer.
        field :connection_id, Crystalline::Nilable.new(::String), { 'format_json': { 'letter_case': ::KintsugiSDK::Utils.field_name('connection_id') } }

        sig { params(phone: T.nilable(::String), street_1: T.nilable(::String), street_2: T.nilable(::String), city: T.nilable(::String), county: T.nilable(::String), state: T.nilable(::String), postal_code: T.nilable(::String), country: T.nilable(Models::Shared::CountryCodeEnum), full_address: T.nilable(::String), name: T.nilable(::String), external_id: T.nilable(::String), status: T.nilable(Models::Shared::StatusEnum), email: T.nilable(::String), address_status: T.nilable(Models::Shared::AddressStatus), source: T.nilable(Models::Shared::SourceEnum), registration_number: T.nilable(::String), connection_id: T.nilable(::String)).void }
        def initialize(phone: nil, street_1: nil, street_2: nil, city: nil, county: nil, state: nil, postal_code: nil, country: nil, full_address: nil, name: nil, external_id: nil, status: nil, email: nil, address_status: nil, source: nil, registration_number: nil, connection_id: nil)
          @phone = phone
          @street_1 = street_1
          @street_2 = street_2
          @city = city
          @county = county
          @state = state
          @postal_code = postal_code
          @country = country
          @full_address = full_address
          @name = name
          @external_id = external_id
          @status = status
          @email = email
          @address_status = address_status
          @source = source
          @registration_number = registration_number
          @connection_id = connection_id
        end

        sig { params(other: T.untyped).returns(T::Boolean) }
        def ==(other)
          return false unless other.is_a? self.class
          return false unless @phone == other.phone
          return false unless @street_1 == other.street_1
          return false unless @street_2 == other.street_2
          return false unless @city == other.city
          return false unless @county == other.county
          return false unless @state == other.state
          return false unless @postal_code == other.postal_code
          return false unless @country == other.country
          return false unless @full_address == other.full_address
          return false unless @name == other.name
          return false unless @external_id == other.external_id
          return false unless @status == other.status
          return false unless @email == other.email
          return false unless @address_status == other.address_status
          return false unless @source == other.source
          return false unless @registration_number == other.registration_number
          return false unless @connection_id == other.connection_id
          true
        end
      end
    end
  end
end

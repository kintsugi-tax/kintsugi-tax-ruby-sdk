# Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

# typed: true
# frozen_string_literal: true


module KintsugiSDK
  module Models
    module Shared
    

      class ProductSubCategory
        extend T::Sig
        include Crystalline::MetadataFields

        # Name of the product subcategory
        #             (e.g., ORAL_HYGIENE, MEDICAL_DEVICES, etc.)
        field :name, ::String, { 'format_json': { 'letter_case': ::KintsugiSDK::Utils.field_name('name'), required: true } }
        # Description of the subcategory in the context of sales tax
        field :description, ::String, { 'format_json': { 'letter_case': ::KintsugiSDK::Utils.field_name('description'), required: true } }
        # Example products or services within the subcategory
        field :example, ::String, { 'format_json': { 'letter_case': ::KintsugiSDK::Utils.field_name('example'), required: true } }
        # Indicates if the subcategory is a frequent subcategory used by the organization. This field is deprecated.
        field :is_frequent, Crystalline::Nilable.new(Crystalline::Boolean.new), { 'format_json': { 'letter_case': ::KintsugiSDK::Utils.field_name('is_frequent') } }

        sig { params(name: ::String, description: ::String, example: ::String, is_frequent: T.nilable(T::Boolean)).void }
        def initialize(name:, description:, example:, is_frequent: false)
          @name = name
          @description = description
          @example = example
          @is_frequent = is_frequent
        end

        sig { params(other: T.untyped).returns(T::Boolean) }
        def ==(other)
          return false unless other.is_a? self.class
          return false unless @name == other.name
          return false unless @description == other.description
          return false unless @example == other.example
          return false unless @is_frequent == other.is_frequent
          true
        end
      end
    end
  end
end

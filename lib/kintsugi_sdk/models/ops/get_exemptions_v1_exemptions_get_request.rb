# Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

# typed: true
# frozen_string_literal: true


module KintsugiSDK
  module Models
    module Ops
    

      class GetExemptionsV1ExemptionsGetRequest
        extend T::Sig
        include Crystalline::MetadataFields

        # Search term to filter exemptions by exemption ID, customer name, or customer email
        field :search_query, Crystalline::Nilable.new(::String), { 'query_param': { 'field_name': 'search_query', 'style': 'form', 'explode': true } }
        # Country code in ISO 3166-1 alpha-2 format
        field :country_code, Crystalline::Nilable.new(Crystalline::Array.new(Models::Shared::CountryCodeEnum)), { 'query_param': { 'field_name': 'country_code', 'style': 'form', 'explode': true } }
        # Jurisdiction identifier
        field :jurisdiction, Crystalline::Nilable.new(::String), { 'query_param': { 'field_name': 'jurisdiction', 'style': 'form', 'explode': true } }
        # Start date for filtering exemptions
        field :start_date, Crystalline::Nilable.new(::String), { 'query_param': { 'field_name': 'start_date', 'style': 'form', 'explode': true } }
        # End date for filtering exemptions
        field :end_date, Crystalline::Nilable.new(::String), { 'query_param': { 'field_name': 'end_date', 'style': 'form', 'explode': true } }
        # Customer ID to filter exemptions
        field :customer_id, Crystalline::Nilable.new(::String), { 'query_param': { 'field_name': 'customer_id', 'style': 'form', 'explode': true } }
        # Transaction ID to filter exemptions
        field :transaction_id, Crystalline::Nilable.new(::String), { 'query_param': { 'field_name': 'transaction_id', 'style': 'form', 'explode': true } }
        # Filter exemptions by their status
        field :status_in, Crystalline::Nilable.new(::String), { 'query_param': { 'field_name': 'status__in', 'style': 'form', 'explode': true } }
        # Fields to sort by (comma-separated)
        field :order_by, Crystalline::Nilable.new(::String), { 'query_param': { 'field_name': 'order_by', 'style': 'form', 'explode': true } }
        # Page number
        field :page, Crystalline::Nilable.new(::Integer), { 'query_param': { 'field_name': 'page', 'style': 'form', 'explode': true } }
        # Page size
        field :size, Crystalline::Nilable.new(::Integer), { 'query_param': { 'field_name': 'size', 'style': 'form', 'explode': true } }

        sig { params(search_query: T.nilable(::String), country_code: T.nilable(T::Array[Models::Shared::CountryCodeEnum]), jurisdiction: T.nilable(::String), start_date: T.nilable(::String), end_date: T.nilable(::String), customer_id: T.nilable(::String), transaction_id: T.nilable(::String), status_in: T.nilable(::String), order_by: T.nilable(::String), page: T.nilable(::Integer), size: T.nilable(::Integer)).void }
        def initialize(search_query: nil, country_code: nil, jurisdiction: nil, start_date: nil, end_date: nil, customer_id: nil, transaction_id: nil, status_in: 'ACTIVE,INACTIVE,EXPIRED', order_by: 'end_date,FEIN,sales_tax_id,status', page: 1, size: 50)
          @search_query = search_query
          @country_code = country_code
          @jurisdiction = jurisdiction
          @start_date = start_date
          @end_date = end_date
          @customer_id = customer_id
          @transaction_id = transaction_id
          @status_in = status_in
          @order_by = order_by
          @page = page
          @size = size
        end

        sig { params(other: T.untyped).returns(T::Boolean) }
        def ==(other)
          return false unless other.is_a? self.class
          return false unless @search_query == other.search_query
          return false unless @country_code == other.country_code
          return false unless @jurisdiction == other.jurisdiction
          return false unless @start_date == other.start_date
          return false unless @end_date == other.end_date
          return false unless @customer_id == other.customer_id
          return false unless @transaction_id == other.transaction_id
          return false unless @status_in == other.status_in
          return false unless @order_by == other.order_by
          return false unless @page == other.page
          return false unless @size == other.size
          true
        end
      end
    end
  end
end

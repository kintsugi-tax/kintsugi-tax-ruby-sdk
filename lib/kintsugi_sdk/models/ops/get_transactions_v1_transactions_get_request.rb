# Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

# typed: true
# frozen_string_literal: true


module KintsugiSDK
  module Models
    module Ops
    

      class GetTransactionsV1TransactionsGetRequest
        extend T::Sig
        include Crystalline::MetadataFields

        # Filter transactions by state code.
        field :state_code, Crystalline::Nilable.new(::String), { 'query_param': { 'field_name': 'state_code', 'style': 'form', 'explode': true } }
        # Filter by transaction type (e.g., SALE, FULL_CREDIT_NOTE,
        #         PARTIAL_CREDIT_NOTE, ARCHIVE etc.).
        field :transaction_type, Crystalline::Nilable.new(::String), { 'query_param': { 'field_name': 'transaction_type', 'style': 'form', 'explode': true } }
        # Filter transactions based on the source.
        field :transaction_source, Crystalline::Nilable.new(::String), { 'query_param': { 'field_name': 'transaction_source', 'style': 'form', 'explode': true } }
        # Search for transactions using a general query
        #         (e.g., order ID, customer name).
        field :search_query, Crystalline::Nilable.new(::String), { 'query_param': { 'field_name': 'search_query', 'style': 'form', 'explode': true } }
        # Filter transactions by country code
        #         (ISO 3166-1 alpha-2 format, e.g., US).
        field :country, Crystalline::Nilable.new(Crystalline::Array.new(Models::Shared::CountryCodeEnum)), { 'query_param': { 'field_name': 'country', 'style': 'form', 'explode': true } }
        # Filter by full state name (e.g., California).
        field :state, Crystalline::Nilable.new(::String), { 'query_param': { 'field_name': 'state', 'style': 'form', 'explode': true } }
        # Filter by transaction status (e.g., PENDING, COMMITTED,
        #         CANCELLED, FULLY_REFUNDED, PARTIALLY_REFUNDED, ARCHIVED).
        field :status, Crystalline::Nilable.new(Models::Shared::TransactionStatusEnum), { 'query_param': { 'field_name': 'status', 'style': 'form', 'explode': true } }
        # Retrieve transactions linked to a specific filing ID.
        field :filing_id, Crystalline::Nilable.new(::String), { 'query_param': { 'field_name': 'filing_id', 'style': 'form', 'explode': true } }
        # Retrieve transactions with a date
        #         greater than or equal to (YYYY-MM-DD).
        field :date_gte, Crystalline::Nilable.new(::String), { 'query_param': { 'field_name': 'date__gte', 'style': 'form', 'explode': true } }
        # Retrieve transactions with a date
        #         less than or equal to (YYYY-MM-DD).
        field :date_lte, Crystalline::Nilable.new(::String), { 'query_param': { 'field_name': 'date__lte', 'style': 'form', 'explode': true } }
        # Filter transactions based on processing status.
        #         Multiple values can be passed as a comma-separated list.
        field :processing_status_in, Crystalline::Nilable.new(::String), { 'query_param': { 'field_name': 'processing_status__in', 'style': 'form', 'explode': true } }
        # Filter transactions by marketplace (e.g., AMAZON, EBAY).
        field :marketplace, Crystalline::Nilable.new(Crystalline::Boolean.new), { 'query_param': { 'field_name': 'marketplace', 'style': 'form', 'explode': true } }
        # Filter transactions by exemption status.
        #         Multiple values can be passed as a comma-separated list (e.g., EXEMPT,TAXABLE).
        field :exempt_in, Crystalline::Nilable.new(::String), { 'query_param': { 'field_name': 'exempt__in', 'style': 'form', 'explode': true } }
        # Filter transactions by type (e.g., SALE, FULL_CREDIT_NOTE,
        #         PARTIAL_CREDIT_NOTE, ARCHIVE etc.).
        field :type, Crystalline::Nilable.new(::String), { 'query_param': { 'field_name': 'type', 'style': 'form', 'explode': true } }
        # Filter by address status (e.g., UNVERIFIED, INVALID,
        #         PARTIALLY_VERIFIED, VERIFIED, UNVERIFIABLE).
        field :address_status_in, Crystalline::Nilable.new(::String), { 'query_param': { 'field_name': 'address_status__in', 'style': 'form', 'explode': true } }
        # Sort results based on specified fields.
        #         Prefix with - for descending order (e.g., -date for newest first).
        field :order_by, Crystalline::Nilable.new(::String), { 'query_param': { 'field_name': 'order_by', 'style': 'form', 'explode': true } }
        # Page number
        field :page, Crystalline::Nilable.new(::Integer), { 'query_param': { 'field_name': 'page', 'style': 'form', 'explode': true } }
        # Page size
        field :size, Crystalline::Nilable.new(::Integer), { 'query_param': { 'field_name': 'size', 'style': 'form', 'explode': true } }

        sig { params(state_code: T.nilable(::String), transaction_type: T.nilable(::String), transaction_source: T.nilable(::String), search_query: T.nilable(::String), country: T.nilable(T::Array[Models::Shared::CountryCodeEnum]), state: T.nilable(::String), status: T.nilable(Models::Shared::TransactionStatusEnum), filing_id: T.nilable(::String), date_gte: T.nilable(::String), date_lte: T.nilable(::String), processing_status_in: T.nilable(::String), marketplace: T.nilable(T::Boolean), exempt_in: T.nilable(::String), type: T.nilable(::String), address_status_in: T.nilable(::String), order_by: T.nilable(::String), page: T.nilable(::Integer), size: T.nilable(::Integer)).void }
        def initialize(state_code: nil, transaction_type: nil, transaction_source: nil, search_query: nil, country: nil, state: nil, status: nil, filing_id: nil, date_gte: nil, date_lte: nil, processing_status_in: nil, marketplace: nil, exempt_in: nil, type: nil, address_status_in: 'UNVERIFIED,INVALID,PARTIALLY_VERIFIED,VERIFIED,UNVERIFIABLE', order_by: 'date,state,customer_name,status', page: 1, size: 50)
          @state_code = state_code
          @transaction_type = transaction_type
          @transaction_source = transaction_source
          @search_query = search_query
          @country = country
          @state = state
          @status = status
          @filing_id = filing_id
          @date_gte = date_gte
          @date_lte = date_lte
          @processing_status_in = processing_status_in
          @marketplace = marketplace
          @exempt_in = exempt_in
          @type = type
          @address_status_in = address_status_in
          @order_by = order_by
          @page = page
          @size = size
        end

        sig { params(other: T.untyped).returns(T::Boolean) }
        def ==(other)
          return false unless other.is_a? self.class
          return false unless @state_code == other.state_code
          return false unless @transaction_type == other.transaction_type
          return false unless @transaction_source == other.transaction_source
          return false unless @search_query == other.search_query
          return false unless @country == other.country
          return false unless @state == other.state
          return false unless @status == other.status
          return false unless @filing_id == other.filing_id
          return false unless @date_gte == other.date_gte
          return false unless @date_lte == other.date_lte
          return false unless @processing_status_in == other.processing_status_in
          return false unless @marketplace == other.marketplace
          return false unless @exempt_in == other.exempt_in
          return false unless @type == other.type
          return false unless @address_status_in == other.address_status_in
          return false unless @order_by == other.order_by
          return false unless @page == other.page
          return false unless @size == other.size
          true
        end
      end
    end
  end
end

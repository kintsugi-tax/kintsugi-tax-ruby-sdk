# Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

# typed: true
# frozen_string_literal: true


module KintsugiSDK
  module Models
    module Ops
    

      class GetProductsV1ProductsGetRequest
        extend T::Sig
        include Crystalline::MetadataFields

        # Search term to filter products by name or other details.
        field :query, Crystalline::Nilable.new(::String), { 'query_param': { 'field_name': 'query', 'style': 'form', 'explode': true } }
        # Filter products by status (comma-separated)
        field :status_in, Crystalline::Nilable.new(::String), { 'query_param': { 'field_name': 'status__in', 'style': 'form', 'explode': true } }
        # Filter products by category (comma-separated)
        field :product_category_in, Crystalline::Nilable.new(::String), { 'query_param': { 'field_name': 'product_category__in', 'style': 'form', 'explode': true } }
        # Filter products by subcategory (comma-separated)
        field :product_subcategory_in, Crystalline::Nilable.new(::String), { 'query_param': { 'field_name': 'product_subcategory__in', 'style': 'form', 'explode': true } }
        # Filter products by source (comma-separated)
        field :source_in, Crystalline::Nilable.new(::String), { 'query_param': { 'field_name': 'source__in', 'style': 'form', 'explode': true } }
        # Order results by specified fields (comma-separated)
        field :order_by, Crystalline::Nilable.new(::String), { 'query_param': { 'field_name': 'order_by', 'style': 'form', 'explode': true } }
        # Page number
        field :page, Crystalline::Nilable.new(::Integer), { 'query_param': { 'field_name': 'page', 'style': 'form', 'explode': true } }
        # Page size
        field :size, Crystalline::Nilable.new(::Integer), { 'query_param': { 'field_name': 'size', 'style': 'form', 'explode': true } }

        sig { params(query: T.nilable(::String), status_in: T.nilable(::String), product_category_in: T.nilable(::String), product_subcategory_in: T.nilable(::String), source_in: T.nilable(::String), order_by: T.nilable(::String), page: T.nilable(::Integer), size: T.nilable(::Integer)).void }
        def initialize(query: nil, status_in: nil, product_category_in: nil, product_subcategory_in: nil, source_in: nil, order_by: nil, page: 1, size: 50)
          @query = query
          @status_in = status_in
          @product_category_in = product_category_in
          @product_subcategory_in = product_subcategory_in
          @source_in = source_in
          @order_by = order_by
          @page = page
          @size = size
        end

        sig { params(other: T.untyped).returns(T::Boolean) }
        def ==(other)
          return false unless other.is_a? self.class
          return false unless @query == other.query
          return false unless @status_in == other.status_in
          return false unless @product_category_in == other.product_category_in
          return false unless @product_subcategory_in == other.product_subcategory_in
          return false unless @source_in == other.source_in
          return false unless @order_by == other.order_by
          return false unless @page == other.page
          return false unless @size == other.size
          true
        end
      end
    end
  end
end

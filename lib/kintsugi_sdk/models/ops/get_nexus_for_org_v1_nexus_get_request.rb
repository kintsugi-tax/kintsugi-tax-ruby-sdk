# Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

# typed: true
# frozen_string_literal: true


module KintsugiSDK
  module Models
    module Ops
    

      class GetNexusForOrgV1NexusGetRequest
        extend T::Sig
        include Crystalline::MetadataFields


        field :state_code, Crystalline::Nilable.new(::String), { 'query_param': { 'field_name': 'state_code', 'style': 'form', 'explode': true } }

        field :country_code_in, Crystalline::Nilable.new(::String), { 'query_param': { 'field_name': 'country_code__in', 'style': 'form', 'explode': true } }

        field :collected_tax_nexus_met, Crystalline::Nilable.new(Crystalline::Boolean.new), { 'query_param': { 'field_name': 'collected_tax_nexus_met', 'style': 'form', 'explode': true } }

        field :status_in, Crystalline::Nilable.new(::String), { 'query_param': { 'field_name': 'status__in', 'style': 'form', 'explode': true } }

        field :order_by, Crystalline::Nilable.new(::String), { 'query_param': { 'field_name': 'order_by', 'style': 'form', 'explode': true } }
        # Page number
        field :page, Crystalline::Nilable.new(::Integer), { 'query_param': { 'field_name': 'page', 'style': 'form', 'explode': true } }
        # Page size
        field :size, Crystalline::Nilable.new(::Integer), { 'query_param': { 'field_name': 'size', 'style': 'form', 'explode': true } }

        sig { params(state_code: T.nilable(::String), country_code_in: T.nilable(::String), collected_tax_nexus_met: T.nilable(T::Boolean), status_in: T.nilable(::String), order_by: T.nilable(::String), page: T.nilable(::Integer), size: T.nilable(::Integer)).void }
        def initialize(state_code: nil, country_code_in: nil, collected_tax_nexus_met: nil, status_in: 'APPROACHING,NOT_EXPOSED,PENDING_REGISTRATION,EXPOSED,APPROACHING,REGISTERED', order_by: 'state_code,country_code', page: 1, size: 50)
          @state_code = state_code
          @country_code_in = country_code_in
          @collected_tax_nexus_met = collected_tax_nexus_met
          @status_in = status_in
          @order_by = order_by
          @page = page
          @size = size
        end

        sig { params(other: T.untyped).returns(T::Boolean) }
        def ==(other)
          return false unless other.is_a? self.class
          return false unless @state_code == other.state_code
          return false unless @country_code_in == other.country_code_in
          return false unless @collected_tax_nexus_met == other.collected_tax_nexus_met
          return false unless @status_in == other.status_in
          return false unless @order_by == other.order_by
          return false unless @page == other.page
          return false unless @size == other.size
          true
        end
      end
    end
  end
end

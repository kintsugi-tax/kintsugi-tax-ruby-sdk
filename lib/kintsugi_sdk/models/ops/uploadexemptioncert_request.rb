# Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

# typed: true
# frozen_string_literal: true


module KintsugiSDK
  module Models
    module Ops
    

      class UploadExemptionCertRequest
        extend T::Sig
        include Crystalline::MetadataFields

        # The unique identifier for the exemption to which the attachment will be associated.
        field :exemption_id, ::String, { 'path_param': { 'field_name': 'exemption_id', 'style': 'simple', 'explode': false } }

        field :body_upload_exemption_certificate_v1_exemptions_exemption_id_attachments_post, Models::Shared::BodyUploadExemptionCertificateV1ExemptionsExemptionIdAttachmentsPost, { 'request': { 'media_type': 'multipart/form-data' } }

        sig { params(exemption_id: ::String, body_upload_exemption_certificate_v1_exemptions_exemption_id_attachments_post: Models::Shared::BodyUploadExemptionCertificateV1ExemptionsExemptionIdAttachmentsPost).void }
        def initialize(exemption_id:, body_upload_exemption_certificate_v1_exemptions_exemption_id_attachments_post:)
          @exemption_id = exemption_id
          @body_upload_exemption_certificate_v1_exemptions_exemption_id_attachments_post = body_upload_exemption_certificate_v1_exemptions_exemption_id_attachments_post
        end

        sig { params(other: T.untyped).returns(T::Boolean) }
        def ==(other)
          return false unless other.is_a? self.class
          return false unless @exemption_id == other.exemption_id
          return false unless @body_upload_exemption_certificate_v1_exemptions_exemption_id_attachments_post == other.body_upload_exemption_certificate_v1_exemptions_exemption_id_attachments_post
          true
        end
      end
    end
  end
end

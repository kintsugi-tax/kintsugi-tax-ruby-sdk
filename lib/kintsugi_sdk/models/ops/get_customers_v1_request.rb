# Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

# typed: true
# frozen_string_literal: true


module KintsugiSDK
  module Models
    module Ops
    

      class GetCustomersV1Request
        extend T::Sig
        include Crystalline::MetadataFields

        # Search term to filter customers by name or other details
        field :search_query, Crystalline::Nilable.new(::String), { 'query_param': { 'field_name': 'search_query', 'style': 'form', 'explode': true } }
        # Country code in ISO 3166-1 alpha-2 format (e.g., 'US')
        field :country, Crystalline::Nilable.new(Crystalline::Array.new(Models::Shared::CountryCodeEnum)), { 'query_param': { 'field_name': 'country', 'style': 'form', 'explode': true } }
        # State or province code to filter customers
        field :state, Crystalline::Nilable.new(::String), { 'query_param': { 'field_name': 'state', 'style': 'form', 'explode': true } }
        # Filter customers by source (comma-separated)
        field :source_in, Crystalline::Nilable.new(::String), { 'query_param': { 'field_name': 'source__in', 'style': 'form', 'explode': true } }
        # Comma-separated list of fields to sort results by.
        field :order_by, Crystalline::Nilable.new(::String), { 'query_param': { 'field_name': 'order_by', 'style': 'form', 'explode': true } }
        # Page number
        field :page, Crystalline::Nilable.new(::Integer), { 'query_param': { 'field_name': 'page', 'style': 'form', 'explode': true } }
        # Page size
        field :size, Crystalline::Nilable.new(::Integer), { 'query_param': { 'field_name': 'size', 'style': 'form', 'explode': true } }

        sig { params(search_query: T.nilable(::String), country: T.nilable(T::Array[Models::Shared::CountryCodeEnum]), state: T.nilable(::String), source_in: T.nilable(::String), order_by: T.nilable(::String), page: T.nilable(::Integer), size: T.nilable(::Integer)).void }
        def initialize(search_query: nil, country: nil, state: nil, source_in: nil, order_by: nil, page: 1, size: 50)
          @search_query = search_query
          @country = country
          @state = state
          @source_in = source_in
          @order_by = order_by
          @page = page
          @size = size
        end

        sig { params(other: T.untyped).returns(T::Boolean) }
        def ==(other)
          return false unless other.is_a? self.class
          return false unless @search_query == other.search_query
          return false unless @country == other.country
          return false unless @state == other.state
          return false unless @source_in == other.source_in
          return false unless @order_by == other.order_by
          return false unless @page == other.page
          return false unless @size == other.size
          true
        end
      end
    end
  end
end
